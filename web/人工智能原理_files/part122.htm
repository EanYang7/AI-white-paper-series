<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="zh-cn" lang="zh-cn"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>7.1.4 纳什均衡的计算复杂性</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part121.htm">&lt; 上一个</a><span> | </span><a href="../%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%8E%9F%E7%90%86.html">内容</a><span> | </span><a href="part123.htm">下一个 &gt;</a></p><p class="s14" style="padding-left: 7pt;text-indent: 0pt;line-height: 22pt;text-align: left;"><a name="bookmark127">7.1.4 </a><span class="h4">纳什均衡的计算复杂性</span></p><p style="padding-top: 3pt;padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: justify;">近年来，理论计算机科学家对有限策略型博弈的（混合策略）纳什均衡计算复杂性问题产生了极大关注。根据纳什定理，我们已经知道有限策略型博弈肯定存在至少一个纳什均衡。因此，寻找纳什均衡问题属于总搜寻问题范畴，即在这类问题中，解一定存在，研究者的目标是找到解。</p><p style="padding-left: 34pt;text-indent: 0pt;line-height: 140%;text-align: justify;">首先，我们介绍两个重要的总搜寻问题（<span class="s10">total search problem</span>）：纳什问题（<span class="s10">NASH</span>）：给定一个策略型博弈，找出其混合策略纳什</p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 18pt;text-align: left;">均衡。混合策略纳什均衡解可能有多个，但只需找到一个即可。</p><p style="padding-top: 7pt;padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: justify;">布劳威尔问题（<span class="s10">BROUWER</span>）：给定集合<span class="s11">[0,1]</span><span class="s19">𝑚</span>（这是一个紧且凸的集合）上的连续函数<span class="s11">𝑓</span>，找到函<span class="s11">𝑓</span>的不动点，即找到<span class="s11">[0,1]</span><span class="s19">𝑚</span>中的点<span class="s11">𝑥</span>，使得<span class="s11">𝑓(𝑥) = 𝑥</span>。注意，这里的<span class="s11">𝑚</span>是一个有限正整数，而且函数<span class="s11">𝑓</span>可能有多个不动点，但我们只要找到一个即可。</p><p class="s10" style="padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: left;"><span class="p">计算机学家 </span>Papadimitriou <span class="p">提出了 </span>TFNP <a href="part331.htm#bookmark611" class="a">这一复杂类</a><span class="s20">[11]</span> <span class="p">，用于描述所有满足以下条件的搜寻问题：每个问题实例都有解。换句话说，对于给定的搜寻问题，如果其每个实例都有解，则属于 </span>TFNP <span class="p">类。例如，</span>FACTOR<span class="p">（分解质因数）问题将整数作为输入，确定其所有质因数。纳什问题也是一个相关例子：找到有限策略型博弈的确切纳什均衡或</span><span class="s11">𝜀</span>-<span class="p">近似纳什均衡。</span></p><p class="s10" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">Papadimitriou <span class="p">还根据证明总搜寻问题每个实例都有解的过程中</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 7pt;text-indent: 0pt;line-height: 139%;text-align: left;">所用的<span class="s10">&quot;</span>论据<span class="s10">&quot;</span>（<span class="s10">arguments</span>）将总搜寻问题进行了分类。这些论据在证明问题解存在性时起到了非构建性的步骤角色。基于这一分类标准，他将总搜寻问题分为以下几类：</p><p class="s10" style="padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: justify;">PPA<span class="p">（多项式奇偶性论据）：如果给定的图有一个奇数度（</span>odd degree<span class="p">）节点，那么它必定至少有另外一个奇数度节点。这被称为奇偶性论据（</span>parity argument<span class="p">，</span>PA<span class="p">）。如果一个问题能够在多项式时间内归约为如下问题：在能以多项式规模表示的图中寻找含有一个奇数度节点的环路（</span>polynomial sized circuit<span class="p">），则此问题属于 </span>PPA <span class="p">类。</span></p><p class="s10" style="padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: justify;">PPAD<span class="p">（有向图的多项式奇偶性论据）：给定一个有向图，任一节点的出度是它的传出弧的个数，入度是它的传入弧的个数。如果节点的入度不等于出度，那么该节点是不平衡的。</span>PPAD <span class="p">论据表明，如果有向图有一个不平衡节点，那么它必定至少存在着另外一个不平衡节点。</span></p><p style="padding-left: 7pt;text-indent: 27pt;line-height: 140%;text-align: justify;">图 <span class="s10">1-1 </span>展示了各类总搜寻问题之间的关系（该图假设<span class="s11">P ⊈ NP</span>。若 <span class="s11">P = NP</span>，则所有类别都合并为一类）。</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 159pt;text-indent: 0pt;text-align: left;"><span><img width="184" height="176" alt="image" src="Image_017.jpg"/></span></p><p class="s24" style="padding-top: 8pt;padding-left: 32pt;text-indent: 0pt;text-align: center;">图 <span class="s25">1-1 </span>不同复杂类之间的关系 </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: left;">PPAD <span class="p">中的问题确实非常困难，这是一个引人入胜的研究领域。如果</span>P=NP<span class="p">，那么 </span>PPAD <span class="p">问题将被解决，因为此时 </span>PPAD <span class="p">将等同于</span>P<span class="p">。然而，几十年来，理论计算机科学家一直在尝试为 </span>PPAD <span class="p">中的一些问题（如布劳威尔问题、纳什问题、</span>EOL <span class="p">问题等）设计高效的算法，但</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 7pt;text-indent: 0pt;line-height: 139%;text-align: left;">却未能成功。因此，除非 <span class="s10">P=NP </span>成立，我们无法确定 <span class="s10">PPAD </span>是否包含难解问题。</p><p class="s10" style="padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: justify;">Lemke<span class="s67">­</span>Howson <span class="p">算法提供了二人博弈纳什均衡存在的另一种证明方法。基于这一观察，我们可以定义如下问题，称之为</span>&quot;End<span class="s67">­</span>of<span class="s67">­</span>A<span class="s67">­</span>Line&quot;</p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">（<span class="s10">EOL</span>）问题。</p><h4 style="padding-top: 2pt;padding-left: 35pt;text-indent: 0pt;text-align: left;">定义 <span class="s14">12 </span>（<span class="s14">End-of-A-Line</span>） <span class="p">给定两个布尔电路</span><span class="s11">𝑆</span><span class="p">和</span><span class="s11">𝑃</span><span class="p">，其映射为：</span></h4><p class="s11" style="padding-top: 3pt;padding-left: 7pt;text-indent: 0pt;line-height: 139%;text-align: left;">𝑆, 𝑃: {0,1}<span class="s19">𝑛</span> → {0,1}<span class="s19">𝑛</span><span class="p">，并且满足</span>𝑃(0<span class="s19">𝑛</span>) = 𝑆(0<span class="s19">𝑛</span>) = 0<span class="s19">𝑛</span><span class="p">。该问题的输出是一个向量</span>𝑥 ∈ {0,1}<span class="s19">𝑛</span><span class="p">，使得</span>𝑆(𝑃(𝑥)) ≠ 𝑥 ≠ 0<span class="p">或者</span>𝑃(𝑆(𝑥)) ≠ 𝑥<span class="p">。</span></p><p style="padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: justify;"><span class="s10">EOL </span>问题是下列总搜寻问题的一个特殊情形：给定一个有向图<span class="s11">𝐺</span>以及已指定的不平衡节点，要找到<span class="s11">𝐺</span>的另外一个不平衡节点。在 <span class="s10">EOL</span>问题中，我们假设<span class="s11">𝐺</span>的每个节点至多有一条传入边和至多有一条传出边。在这种限制下，给定的图必定是一组路径和环路。图 <span class="s10">1-2 </span>提供了一些具有代表性的这种图形的示例。</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 136pt;text-indent: 0pt;text-align: left;"><span><img width="246" height="176" alt="image" src="Image_018.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s24" style="padding-left: 32pt;text-indent: 0pt;text-align: center;">图 <span class="s25">1-2 EOL </span>问题的一些例子 </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 27pt;line-height: 140%;text-align: justify;">理论计算机学者已经证明 <span class="s10">EOL </span>问题是 <span class="s10">PPAD-complete </span>的。基于这一事实，我们可以立即得到以下两个结果：</p><p style="padding-left: 34pt;text-indent: 0pt;line-height: 139%;text-align: left;">若 <span class="s10">EOL </span>问题可以归约为问题<span class="s11">𝑋</span>，则问题<span class="s11">𝑋</span>是 <span class="s10">PPAD-complete </span>的。若问题<span class="s11">𝑌</span>可以归约为 <span class="s10">EOL </span>问题，则问题<span class="s11">𝑌</span>属于 <span class="s10">PPAD </span>类。</p><p style="padding-left: 35pt;text-indent: 0pt;line-height: 22pt;text-align: left;"><span class="h4">定理 </span><span class="s14">13 </span>纳什问题是 <span class="s10">PPAD-complete </span>问题。</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 35pt;text-indent: 0pt;line-height: 25pt;text-align: left;"><span class="h4">证明：</span>首先，我们证明纳什问题属于 <span class="s10">PPAD </span>类，方法是将纳什问</p><p style="padding-top: 3pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">题归约为 <span class="s10">EOL </span>问题。</p><p style="padding-top: 7pt;padding-left: 34pt;text-indent: 0pt;text-align: left;">其次，我们证明纳什问题是 <span class="s10">PPAD-complete </span>问题，方法是将 <span class="s10">EOL</span></p><p style="padding-top: 7pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">问题归约为纳什问题。</p><p style="padding-top: 7pt;padding-left: 34pt;text-indent: 0pt;text-align: left;">在上述两个方向的证明中，布劳威尔问题发挥了关键作用。 <span class="s11">∎</span></p><p style="padding-top: 7pt;padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: left;">由于纳什问题是 <span class="s10">PPAD-complete </span>问题，在理论分析的基础上，学 者们开始寻找新的求解纳什均衡的方法。得益于计算机算力的提高和 人工智能算法的发展，逐渐涌现出一些使用人工智能算法求解纳什均 衡的算法。在计算纳什均衡时，深度学习和强化学习可以起到关键的 作用。首先，深度学习可以用于特征提取。在纳什均衡计算中，每个 玩家的策略都是一个向量，向量的每个元素代表了一种策略。深度学 习可以通过学习大量的样本数据，提取出每个玩家的策略特征，从而 减少计算量，提高计算效率。其次，深度学习也可以用于策略预测。在纳什均衡计算中，每个玩家的策略都是基于其他玩家的策略制定的。深度学习可以通过学习大量的样本数据，预测每个玩家的策略，从而 为纳什均衡的计算提供基础。另一方面，强化学习可以用于策略优化。在纳什均衡计算中，每个玩家的策略都需要不断优化，以应对其他玩 家的策略变化。强化学习可以通过与环境交互，学习最优的策略组合，从而优化纳什均衡的计算结果。总之，深度学习和强化学习在计算纳 什均衡时都具有重要的应用价值。它们可以帮助我们提高计算效率，预测策略，优化结果，从而更好地解决纳什均衡问题。同时，这些算 法的应用也受到了一些限制，例如它们需要大量的数据和计算资源，而且它们可能无法处理一些非常复杂的问题。因此，在未来，我们需 要进一步研究这些算法，以提高它们的性能和效率，从而更好地解决 纳什均衡问题。例如，多智能体强化学习研究如何利用多个智能体之 间通信、协作的方法共同完成一个任务。这一方向十分适合应用在求 解多人纳什均衡以及合作博弈均衡上。</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part121.htm">&lt; 上一个</a><span> | </span><a href="../%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%8E%9F%E7%90%86.html">内容</a><span> | </span><a href="part123.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
