<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="zh-cn" lang="zh-cn"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>7.1.3 纳什均衡的计算</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part120.htm">&lt; 上一个</a><span> | </span><a href="../%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%8E%9F%E7%90%86.html">内容</a><span> | </span><a href="part122.htm">下一个 &gt;</a></p><p class="s14" style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark126">7.1.3 </a><span class="h4">纳什均衡的计算</span></p><p style="padding-top: 3pt;padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: justify;">纳什均衡是博弈论中一个重要的基本数学问题，也是当前理论计算机科学中一个活跃的研究领域。在本文中，我们将介绍三种纳什均衡的求解算法，它们分别是支撑枚举算法、<span class="s10">Lemke-Howson </span>算法以及 <span class="s10">Lipton-Markakis-Mehta </span>算法。前两种算法属于精确求解算法，而最后一种则是近似算法。</p><p class="s10" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">7.1.3.1 <span class="s37">支撑枚举算法</span></p><p class="s11" style="padding-top: 7pt;padding-left: 34pt;text-indent: 0pt;text-align: left;"><span class="p">考虑策略型博弈</span>Γ = 〈𝑁, (𝑆<span class="s15">𝑖</span>), (𝑢<span class="s15">𝑖</span>)〉<span class="p">。给定参与者</span>𝑖<span class="p">的一个混合策略</span></p><p class="s11" style="padding-top: 5pt;padding-left: 7pt;text-indent: 0pt;line-height: 132%;text-align: left;">𝜎<span class="s15">𝑖</span><span class="p">，</span>𝜎<span class="s15">𝑖</span><span class="p">的支撑（记为</span>𝛿(𝜎<span class="s15">𝑖</span>)<span class="p">）是一个集合，其中包含</span>𝜎<span class="s15">𝑖</span><span class="p">中概率为正的所有纯策略</span>𝑠<span class="s15">𝑖</span><span class="p">：</span></p><p class="s11" style="padding-left: 131pt;text-indent: 0pt;text-align: left;">𝛿(𝜎<span class="s15">𝑖</span>) = {𝑠<span class="s15">𝑖</span><span class="s41"> </span>∈ 𝑆<span class="s15">𝑖</span>: 𝜎<span class="s15">𝑖</span>(𝑠<span class="s15">𝑖</span>) &gt; 0}.</p><p class="s11" style="padding-top: 5pt;padding-left: 7pt;text-indent: 27pt;line-height: 132%;text-align: left;"><span class="p">对于一个混合策略组</span>𝜎 = (𝜎<span class="s15">1</span>, … , 𝜎<span class="s15">𝑛</span>)<span class="p">，我们可以自然地定义</span>𝜎<span class="p">的支撑为</span>𝛿(𝜎<span class="s15">𝑖</span>)<span class="p">（其中</span>𝑖 = 1, 2, … , 𝑛<span class="p">）的乘积：</span></p><p class="s11" style="padding-left: 114pt;text-indent: 0pt;text-align: left;">𝛿(𝜎<span class="s15">1</span>, … , 𝜎<span class="s15">𝑛</span>) = 𝛿(𝜎<span class="s15">1</span>) × … × 𝛿(𝜎<span class="s15">𝑛</span>).</p><p style="padding-top: 5pt;padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: justify;">这个集合包含了当参与者根据自己的策略选择时，所有伴随正概率的纯策略组合。我们可以立即注意到，每个混合策略纳什均衡必定对应一个支撑。对于有限博弈，由于支撑个数是有限的，因此我们可以考察每个支撑，看看哪个支撑能够产生纳什均衡。</p><p class="s11" style="padding-left: 34pt;text-indent: 0pt;text-align: left;"><span class="p">设</span>𝑋<span class="s15">𝑖</span><span class="s41"> </span>⊆ 𝑆<span class="s15">𝑖</span><span class="p">为</span>𝑆<span class="s15">𝑖</span><span class="p">的一个非空子集，表示我们当前的猜测：在纳什均</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 3pt;padding-left: 7pt;text-indent: 0pt;line-height: 135%;text-align: justify;"><span class="p">衡中，参与者</span>𝑖<span class="p">的哪些策略具有正概率。换言之，我们当前猜测纳什均衡的一个支撑为</span>𝑋<span class="s15">1</span><span class="s41"> </span>× 𝑋<span class="s15">2</span><span class="s41"> </span>× … × 𝑋<span class="s15">𝑛</span><span class="p">。如果存在对应于此支撑的纳什均衡，那么根据上述结果，必定存在数</span>𝑤<span class="s15">1</span>, … , 𝑤<span class="s15">𝑛</span><span class="p">和混合策略</span>𝜎<span class="s15">1</span>, … , 𝜎<span class="s15">𝑛</span><span class="p">使得以下条件成立：</span></p><p class="s11" style="padding-left: 3pt;text-indent: 0pt;text-align: center;">𝑤<span class="s15">𝑖</span><span class="s41"> </span>= 𝑢<span class="s15">𝑖</span>(𝑠<span class="s15">𝑖</span>, 𝜎<span class="s15">−𝑖</span>),         ∀𝑠<span class="s15">𝑖</span><span class="s41"> </span>∈ 𝑋<span class="s15">𝑖</span>, ∀𝑖 ∈ 𝑁.</p><p style="padding-top: 5pt;padding-left: 34pt;text-indent: 0pt;text-align: left;">展开可得：</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 3pt;text-indent: 0pt;text-align: center;">𝑤<span class="s17">𝑖</span> = ∑ [∏ 𝜎<span class="s17">𝑗</span>(𝑠<span class="s17">𝑗</span>)] 𝑢<span class="s17">𝑖</span>(𝑠<span class="s17">𝑖</span>, 𝑠<span class="s17">−𝑖</span>).</p><p class="s63" style="padding-top: 5pt;text-indent: 0pt;text-align: right;">𝑠<span class="s64">−𝑖</span>∈𝑆<span class="s64">−𝑖</span></p><p class="s16" style="padding-top: 5pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">𝑗≠𝑖</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 7pt;text-indent: 27pt;line-height: 132%;text-align: justify;">上述条件断言，如果每个参与者<span class="s11">𝑖</span>选择混合策略<span class="s11">𝜎</span><span class="s15">𝑖</span><span class="s41"> </span>中的任何伴随正概率的纯策略，则每个参与者得到的收益<span class="s11">𝑤</span><span class="s15">𝑖</span>必定相等。接下来，我们还需要满足：</p><p class="s11" style="padding-top: 1pt;padding-left: 3pt;text-indent: 0pt;text-align: center;">𝑤<span class="s15">𝑖</span><span class="s41"> </span>≥ 𝑢<span class="s15">𝑖</span>(𝑠<span class="s15">𝑖</span>, 𝜎<span class="s15">−𝑖</span>),         ∀𝑠<span class="s15">𝑖</span><span class="s41"> </span>∈ 𝑆<span class="s15">𝑖</span>\𝑋<span class="s15">𝑖</span>, ∀𝑖 ∈ 𝑁.</p><p style="padding-top: 5pt;padding-left: 34pt;text-indent: 0pt;text-align: left;">上式展开，可得</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-left: 3pt;text-indent: 0pt;text-align: center;">𝑤<span class="s17">𝑖</span> ≥   ∑  [∏ 𝜎<span class="s17">𝑗</span>(𝑠<span class="s17">𝑗</span>)] 𝑢<span class="s17">𝑖</span>(𝑠<span class="s17">𝑖</span>, 𝑠<span class="s17">−𝑖</span>),        ∀𝑠<span class="s17">𝑖</span> ∈ 𝑆<span class="s17">𝑖</span>\𝑋<span class="s17">𝑖</span>, ∀𝑖 ∈ 𝑁.</p><p class="s63" style="padding-top: 5pt;text-indent: 0pt;text-align: right;">𝑠<span class="s64">−𝑖</span>∈𝑆<span class="s64">−𝑖</span></p><p class="s16" style="padding-top: 5pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">𝑗≠𝑖</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 3pt;padding-left: 7pt;text-indent: 27pt;line-height: 132%;text-align: justify;"><span class="p">上述条件确保</span>𝑋<span class="s15">𝑖</span><span class="p">中的纯策略产生的收益不小于</span>𝑆<span class="s15">𝑖</span>\𝑋<span class="s15">𝑖</span><span class="p">中的纯策略产生的收益。接下来，我们有：</span></p><p class="s11" style="padding-top: 1pt;padding-left: 3pt;text-indent: 0pt;text-align: center;">𝜎<span class="s15">𝑖</span>(𝑥<span class="s15">𝑖</span>) &gt; 0,         ∀𝑥<span class="s15">𝑖</span><span class="s41"> </span>∈ 𝑋<span class="s15">𝑖</span>, ∀𝑖 ∈ 𝑁.</p><p style="padding-top: 5pt;padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: justify;">上述条件表明参与者<span class="s11">𝑖</span>（对于所有<span class="s11">𝑖 ∈ 𝑁</span>）混合策略的支撑中的每个纯策略都有正的概率。接下来的一组约束为：</p><p class="s11" style="padding-left: 3pt;text-indent: 0pt;text-align: center;">𝜎<span class="s15">𝑖</span>(𝑥<span class="s15">𝑖</span>) = 0,         ∀𝑥<span class="s15">𝑖</span><span class="s41"> </span>∈ 𝑆<span class="s15">𝑖</span>\𝑋<span class="s15">𝑖</span>, ∀𝑖 ∈ 𝑁.</p><p style="padding-top: 5pt;padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: justify;">上述条件断言，对于每个参与者<span class="s11">𝑖</span>（对于所有<span class="s11">𝑖 ∈ 𝑁</span>），若该策略不在他的混合策略的支撑中，则该纯策略的概率为零。最后，我们需要满足：</p><p class="s11" style="padding-top: 3pt;padding-left: 132pt;text-indent: 0pt;text-align: left;">∑ 𝜎<span class="s17">𝑖</span>(𝑥<span class="s17">𝑖</span>) = 1,         ∀𝑖 ∈ 𝑁.</p><p class="s16" style="padding-top: 5pt;padding-left: 130pt;text-indent: 0pt;text-align: left;">𝑥<span class="s50">𝑖</span>∈𝑆<span class="s50">𝑖</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 34pt;text-indent: 0pt;text-align: left;">上述条件保证了每个<span class="s11">𝜎</span><span class="s15">𝑖</span>都是<span class="s11">𝑆</span><span class="s15">𝑖</span>上的一个概率分布。</p><p class="s11" style="padding-top: 5pt;padding-left: 34pt;text-indent: 0pt;text-align: left;"><span class="p">我们需要找到</span>𝑤<span class="s15">1</span><span class="s41"> </span><span class="p">，</span><span class="s10">…</span><span class="p">，</span>𝑤<span class="s15">𝑛</span><span class="s41"> </span><span class="p">以及</span>𝜎<span class="s15">1</span>(𝑥<span class="s15">1</span>) ∀𝑠<span class="s15">1</span><span class="s41"> </span>∈ 𝑆<span class="s15">1</span><span class="s41"> </span><span class="p">，</span>𝜎<span class="s15">1</span>(𝑥<span class="s15">2</span>) ∀𝑠<span class="s15">2</span><span class="s41"> </span>∈</p><p class="s11" style="padding-top: 5pt;padding-left: 7pt;text-indent: 0pt;line-height: 132%;text-align: justify;">𝑆<span class="s15">2</span><span class="p">，</span><span class="s10">…</span><span class="p">，</span>𝜎<span class="s15">1</span>(𝑥<span class="s15">𝑛</span>)  ∀𝑠<span class="s15">𝑛  </span>∈ 𝑆<span class="s15">𝑛</span><span class="p">使得以上所有约束条件满足。此时，</span>(𝜎<span class="s15">1</span>, … , 𝜎<span class="s15">𝑛</span>)<span class="p">是一个纳什均衡，</span>𝑤<span class="s15">𝑖</span><span class="p">是参与者</span>𝑖<span class="p">在该纳什均衡中的期望收益。另一方面，如果不存在满足以上条件的解，那么没有解对应着支撑</span>𝑋<span class="s15">1  </span>× 𝑋<span class="s15">2  </span>×</p><p class="s11" style="padding-left: 7pt;text-indent: 0pt;line-height: 132%;text-align: justify;">… × 𝑋<span class="s15">𝑛</span><span class="p">。以上所有约束条件涉及的未知数个数为</span>𝑛 + ∑<span class="s15">𝑖∈𝑁</span>|𝑆<span class="s15">𝑖</span>|<span class="p">，方程个数为</span>𝑛 + 2 ∑<span class="s15">𝑖∈𝑁</span>|𝑆<span class="s15">𝑖</span>|<span class="p">，其中</span>𝑛<span class="p">对应着</span>𝑤<span class="s15">1</span>, … , 𝑤<span class="s15">𝑛</span><span class="p">，而</span>|𝑆<span class="s15">𝑖</span>|<span class="p">对应着变量</span>𝜎<span class="s15">𝑖</span>(𝑠<span class="s15">𝑖</span>)<span class="p">，</span></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 137%;text-align: left;"><span class="s11">𝑠</span><span class="s15">𝑖  </span><span class="s11">∈ 𝑆</span><span class="s15">𝑖</span>。即使只有 <span class="s10">2 </span>个参与者，且每个参与者有 <span class="s10">3 </span>个策略，也会有 <span class="s10">8 </span>个变量和 <span class="s10">14  </span>个方程。如果参与者个数大于 <span class="s10">2</span>，那么不仅面对更多的 方程，还必须处理非线性（由于<span class="s11">∏</span><span class="s15">𝑗≠𝑖 </span><span class="s11">𝜎</span><span class="s15">𝑗</span><span class="s11">(𝑠</span><span class="s15">𝑗</span><span class="s11">)</span>的存在）。对于两人博弈，这些方程构成了所谓的线性互补问题（<span class="s10">linear complementarity problem</span>， <span class="s10">LCP</span>）。当参与者为 <span class="s10">3 </span>人或 <span class="s10">3 </span>人以上时，这些方程构成了所谓的非线 性互补问题（<span class="s10">nonlinear complementarity problem</span>，<span class="s10">NLCP</span>）。我们在这里 不提供关于这两个问题的更多细节；有兴趣的读者可以参考 <a href="part331.htm#bookmark605" class="s5">Murty</a><a href="part331.htm#bookmark605" class="s33">[5</a><span class="s20">]</span><span class="s10">   </span>。</p><p class="s10" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">7.1.3.2 Lemke-Howson <span class="s37">算法</span></p><p class="s10" style="padding-top: 7pt;padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: justify;"><a href="part331.htm#bookmark606" class="a">现在，我们将介绍另一种算法</a><span class="s20">[6]</span> <span class="p">，该算法与之前需要求解线性规划的算法本质上不同，它是一种组合算法，用于处理离散属性。首先，我们将纳什均衡的求解归约到对称博弈中，因为在一般二人博弈中，求解纳什均衡的算法会更加复杂。接着，我们将描述该算法在对称博弈前提下的情况，因为这种情况下的算法描述更加简明。</span>Savani<span class="p">和 </span><a href="part331.htm#bookmark607" class="s5">Von Stengel</a><span class="s20">[7]</span> <span class="p">已经证明，利用 </span>Lemke-Howson <span class="p">算法求解纳什均衡的最坏情况下的时间复杂度是指数级的。</span></p><h4 style="padding-left: 35pt;text-indent: 0pt;line-height: 22pt;text-align: justify;">定理 <span class="s14">10 </span><span class="p">对称二人博弈一定存在对称纳什均衡。</span></h4><p style="padding-top: 3pt;padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: justify;">在考虑对称的二人博弈<span class="s11">𝐶 ∈ [0,1]</span><span class="s19">𝑛×𝑛</span>时，其中，非负矩阵<span class="s11">𝐶</span>不存在全为零的行。我们的目标是确定在纳什均衡状态下最优响应所对应的最优收益的取值。为此，我们放松了策略分布之和为 <span class="s10">1 </span>的限制，并假设最优收益为 <span class="s10">1</span>。这样，我们得到了<span class="s11">2𝑛</span>个约束条件，即，<span class="s11">𝐶𝑧 ≤ 1</span>，其</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 7pt;text-indent: 0pt;line-height: 139%;text-align: justify;">中<span class="s11">𝑧 ≥ 0</span>。这些约束条件所定义的区域是一个凸多面体<span class="s11">𝑃</span>（由于非负矩阵<span class="s11">𝐶 </span>不存在全为零的行 ）。 我们假设凸多面体<span class="s11">𝑃 </span>是非退化的</p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 139%;text-align: justify;">（<span class="s10">nondegenerate</span>），<span class="s11">𝑃</span>上的所有顶点都满足上述<span class="s11">2𝑛</span>个不等式中恰好有<span class="s11">𝑛</span>个取等号。非退化假设是优化领域中的常用假设，因为退化情况出现的概率非常小。即使出现了退化情况，我们也可以通过对矩阵<span class="s11">𝐶</span>中的所有元素添加一个极小的随机扰动，以极大概率使得凸多面体<span class="s11">𝑃</span>成为非退化的。</p><p class="s11" style="padding-left: 7pt;text-indent: 27pt;line-height: 136%;text-align: justify;"><span class="p">在多面体</span>𝑃<span class="p">中，每个点都对应一个混合策略。具体地，对于</span>𝑃<span class="p">的一个顶点</span>𝑧 ∈ 𝑃<span class="p">，如果其包含纯策略</span>𝑖 ∈ 𝑁<span class="p">，那么满足</span>(𝐶𝑧)<span class="s15">𝑖</span><span class="s41"> </span>= 1<span class="p">或</span>𝑧<span class="s15">𝑖</span><span class="s41"> </span>= 0<span class="p">，我们称该顶点包含纯策略</span>𝑖 ∈ 𝑁<span class="p">。由此得到以下引理：</span></p><p class="s11" style="padding-left: 35pt;text-indent: 0pt;line-height: 22pt;text-align: justify;"><span class="h4">引理 </span><span class="s14">11 </span>𝑥<span class="p">是对称博弈</span>𝐶<span class="p">的一个对称纳什均衡，如果</span>𝑃<span class="p">上的顶点</span>𝑧 ≠</p><p class="s11" style="padding-top: 3pt;padding-left: 7pt;text-indent: 0pt;text-align: justify;">0<span class="p">，并且顶点</span>𝑧<span class="p">包含所有的纯策略</span>𝑖 ∈ 𝑁<span class="p">成立。其中</span></p><p class="s11" style="padding-top: 14pt;text-indent: 0pt;text-align: right;">𝑥<span class="s15">𝑖</span></p><p class="s11" style="padding-top: 3pt;padding-left: 31pt;text-indent: 0pt;line-height: 19pt;text-align: left;">𝑧<span class="s15">𝑖</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="53" height="1" alt="image" src="Image_016.png"/></span></p><p class="s11" style="text-indent: 0pt;line-height: 14pt;text-align: left;">∑</p><p style="text-indent: 0pt;text-align: left;"/><p class="s11" style="text-indent: 0pt;line-height: 14pt;text-align: left;">=</p><p style="text-indent: 0pt;text-align: left;"/><p class="s16" style="padding-left: 27pt;text-indent: 0pt;line-height: 11pt;text-align: left;">𝑛</p><p class="s16" style="padding-left: 27pt;text-indent: 0pt;line-height: 11pt;text-align: left;">𝑖=1</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="text-indent: 0pt;line-height: 13pt;text-align: right;">.</p><p class="s11" style="text-indent: 0pt;line-height: 15pt;text-align: right;">𝑧<span class="s15">𝑖</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 35pt;text-indent: 0pt;line-height: 24pt;text-align: left;"><span class="h4">证明：</span>首先，<span class="s11">𝑥</span>是良定义的（由于<span class="s11">𝑧 ≥ 0</span>且<span class="s11">𝑧 ≠ 0</span>）。其次，由于顶</p><p class="s11" style="padding-top: 3pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><span class="p">点</span>𝑧<span class="p">包含所有的纯策略，我们由</span>𝑧<span class="s15">𝑖</span><span class="s41"> </span>≥ 0<span class="p">能得到</span>(𝐶𝑧)<span class="s15">𝑖</span><span class="s41"> </span>= 1<span class="p">且由</span>(𝐶𝑧)<span class="s15">𝑖</span><span class="s41"> </span>= 1</p><p style="padding-top: 5pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">能得到<span class="s11">𝑧</span><span class="s15">𝑖</span><span class="s41"> </span><span class="s11">≥ 0</span>。这意味着玩家 <span class="s10">1 </span>在混合策略<span class="s11">𝑧</span>支撑中的纯策略是玩家 <span class="s10">2</span></p><p style="padding-top: 5pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">的策略<span class="s11">𝑧</span>的最优响应。因此，玩家 <span class="s10">1 </span>的混合策略<span class="s11">𝑧</span>是玩家 <span class="s10">2 </span>的混合策略</p><p class="s11" style="padding-top: 7pt;padding-left: 7pt;text-indent: 0pt;line-height: 140%;text-align: left;">𝑧<span class="p">的一个最优响应。由对称性可以推断对称博弈</span>𝐶<span class="p">的一个对称纳什均衡是</span>𝑧<span class="p">。</span>∎</p><p style="padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: left;">前述已证明，若多面体<span class="s11">𝑃</span>的顶点涵盖所有纯策略，则对应纳什均衡。接下来需证明存在此类顶点。我们采用构建有向图的方法来猜测最终纳什均衡的支撑。该有向图中每个顶点的出度和入度至多为 <span class="s10">1</span>，因此可进行有向路径遍历。</p><p style="text-indent: 0pt;text-align: right;">首先，选定一个策略（以策略 <span class="s10">1 </span>为例）。然后考虑所有不含策略</p><p class="s11" style="padding-top: 7pt;text-indent: 0pt;text-align: right;"><span class="s10">1 </span><span class="p">的顶点以及包含所有纯策略的顶点的集合</span>𝑉<span class="p">。从集合</span>𝑉<span class="p">中的顶点</span>𝑣<span class="s17">0</span> =</p><p class="s11" style="padding-top: 7pt;text-indent: 0pt;text-align: right;">0<span class="p">初始，在顶点集</span>𝑉<span class="p">中逐步构造出路径</span>〈𝑣<span class="s15">0</span>, 𝑣<span class="s15">1</span>, … 〉<span class="p">。设多面体</span>𝑃<span class="p">非退化，</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 7pt;text-indent: 0pt;line-height: 132%;text-align: justify;">根据定义，顶点<span class="s11">𝑣</span><span class="s15">0</span>有<span class="s11">𝑛</span>个相邻顶点，每个顶点与<span class="s11">𝑣</span><span class="s15">0</span>仅有一个取等号的约束条件不同。选出不含策略 <span class="s10">1 </span>的顶点，即同时不满足<span class="s11">(𝐶𝑧)</span><span class="s17">1</span><span class="s11"> = 1</span>和</p><p class="s11" style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;line-height: 134%;text-align: justify;">𝑧<span class="s15">1  </span>= 0<span class="p">的点</span>𝑣<span class="s15">1</span><span class="p">。虽然</span>𝑣<span class="s15">1</span><span class="p">不含策略 </span><span class="s10">1</span><span class="p">，但</span>𝑣<span class="s15">1</span><span class="p">有</span>𝑛<span class="p">个相邻顶点，故</span>𝑣<span class="s15">1</span><span class="p">一定包含某个策略</span>𝑖<span class="p">两次，即</span>(𝐶𝑧)<span class="s15">𝑖  </span>= 1<span class="p">且</span>𝑧<span class="s15">𝑖  </span>= 0<span class="p">。对这两个条件进行放松，可得到两个顶点，其中一个顶点为</span>𝑣<span class="s15">0</span><span class="p">，另一个顶点为</span>𝑣<span class="s15">2</span><span class="p">，若某个顶点</span>𝑣<span class="s15">2</span><span class="p">包含所有纯策略，则算法停止。由引理 </span><span class="s10">11</span><span class="p">，此时找到了一个纳什均衡。若不满足，则继续沿着路径寻找，直到找到一个顶点</span>𝑣<span class="s15">𝑗</span><span class="p">包含所有纯策略。</span></p><p style="padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: right;">随后，分析 <span class="s10">Lemke-Howson </span>算法是否能找到纳什均衡，即 <span class="s10">Lemke- Howson </span>算法是否会在满足条件的顶点<span class="s11">𝑣</span><span class="s15">𝑗</span>处停止。若否，由于多面体</p><p class="s11" style="text-indent: 0pt;line-height: 17pt;text-align: right;">𝑃<span class="p">的顶点数有有限多个，因此唯一可能是路径在某几个顶点处形成有</span></p><p style="padding-top: 7pt;padding-left: 7pt;text-indent: 0pt;line-height: 138%;text-align: left;">向环。根据算法描述，每个路径上的顶点至多有一个前序和一个后继。若出现环，只可能回到<span class="s11">𝑣</span><span class="s15">0</span>点。然而，由于<span class="s11">𝑣</span><span class="s15">0</span>只有一个相邻顶点不含策略 <span class="s10">1</span>，这种情况是不可能的。若不出现此情况，由于多面体上的顶点数有限，算法一定在某一时刻停止。此时我们必定找到一个包含所有纯策略的顶点，即能够找到一个纳什均衡。至此，我们证明了 <span class="s10">Lemke- Howson </span>算法必定能够找到纳什均衡。</p><p class="s10" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">7.1.3.3 Lipton-Markakis-Mehta <span class="s37">算法</span></p><p style="padding-top: 7pt;padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: left;">先前提及的两种算法均为精确求解纳什均衡的方法，接下来，我们介绍一种近似算法。</p><p style="padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: justify;"><span class="s10">Lipton</span>、<span class="s10">Markakis </span>和 <a href="part331.htm#bookmark608" class="s5">Mehta </a><span class="s20">[8]</span><span class="s10"> </span>在其研究中证明了存在支撑数较小的近似纳什均衡。具体而言，对于给定的<span class="s11">𝜀 &gt; 0</span>，对于任意的每个参与者各自拥有<span class="s11">𝑛</span>个纯策略的二人博弈，至少存在一个<span class="s11">𝜀</span><span class="s10">-</span>近似纳什均衡，其中两人的支撑数仅为<span class="s11">𝑂(log 𝑛/𝜀</span><span class="s19">2</span><span class="s11">)</span>。为了说明，我们对混合策略<span class="s11">𝑥</span>独立地随机采样<span class="s11">𝑘</span>次，形成一个多重集<span class="s11">𝑆</span>，然后在<span class="s11">𝑆</span>中随机选择一个纯策略得到一个<span class="s11">𝑘</span><span class="s10">-</span>经验策略。该经验策略是通过从分布<span class="s11">𝑥</span>来进行博弈。 <span class="s10">Lipton-Markakis-Mehta </span>算法指出：只需将所有可能出现的多重集枚举</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 7pt;text-indent: 0pt;line-height: 113%;text-align: left;">出来，并将其对应的经验策略应用于博弈问题中进行验证。这种方法 的时间复杂度为<span class="s11">𝑛</span><span class="s19">𝑂(log</span><span class="s11"> </span><span class="s19">𝑛/𝜀</span><span class="s65">2</span><span class="s66">)</span>，也被称为<span class="h4">准多项式时间</span>（<span class="s10">quasi-polynomial time</span>）。与支撑枚举算法类似，该方法亦能获得所有近似纳什均衡的解。</p><p style="padding-top: 4pt;padding-left: 7pt;text-indent: 0pt;line-height: 139%;text-align: justify;">概率法在证明稀疏支撑的近似纳什均衡存在性方面也得到了更多应用。例如，<a href="part331.htm#bookmark609" class="s5">Barman</a><span class="s20">[9]</span><span class="s10"> </span>提出了另一个相关结果。近期，<a href="part331.htm#bookmark610" class="s5">Rubinstein </a><span class="s20">[10]</span><span class="s10"> </span>证明，假设某种较为温和的假设成立，<span class="s10">Lipton-Markakis-Mehta </span>算法的时间复杂度是近乎最优的。</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part120.htm">&lt; 上一个</a><span> | </span><a href="../%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%8E%9F%E7%90%86.html">内容</a><span> | </span><a href="part122.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
