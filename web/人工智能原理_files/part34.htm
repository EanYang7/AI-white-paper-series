<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="zh-cn" lang="zh-cn"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>2.1 命题知识表示与推理</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part33.htm">&lt; 上一个</a><span> | </span><a href="../%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%8E%9F%E7%90%86.html">内容</a><span> | </span><a href="part35.htm">下一个 &gt;</a></p><p class="s8" style="padding-top: 17pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><a name="bookmark34">2.1 </a><span class="s9">命题知识表示与推理</span></p><p style="padding-top: 6pt;padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: left;">知识表示与推理是人工智能中的一个重要领域。早在 <span class="s10">1958 </span>年，麦卡锡考虑的人工智能系统建议采纳者（<span class="s10">Advice Taker [1</span><span class="s20">]</span>，其可被视为第一个完整的人工智能系统<span class="s20">[2]</span>）已主张采用知识求解问题。目前，知识表示与推理方法的应用涵盖了人工智能领域的多个应用分支，包括形式化验证、问答系统、语义网、自动规划、感知机器人和多智能体系统在内的多个领域<span class="s20">[3]</span>。</p><p style="padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: left;">逻辑是一种使用时间最长，且应用最为广泛的知识表示方法，几 乎所有其它知识表示方法都能够使用某种逻辑进行等价表示。早在计 算机时代到来之前，数理逻辑学家就已开始使用经典逻辑形式化表示 陈述性的知识，主要为了对数学进行形式化，以自动进行定理证明。尽管经典逻辑在某些情况下不能表达人工智能中各式各样的非数学 形式的知识，但毫无疑问其仍然在知识表示领域占有举足轻重的地位，其中一阶逻辑由于其极强的表达能力、易理解的基于模型论的语义以 及较好的推理能力而应用最为广泛。研究人员为一阶逻辑提出了多种 的推理方法，例如 <span class="s10">Tableau </span>方法<span class="s20">[4]</span>、<span class="s10">DP </span>方法<span class="s20">[5]</span>、归结方法<span class="s20">[6]</span>等，开发 了包括<span class="s10">Otter</span><span class="s20">[7]</span>、<span class="s10">3TAP</span><span class="s20">[8]</span>、<span class="s10">Isabelle</span><span class="s20">[9]</span>等在内的多个推理机。</p><p style="padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: left;">一阶逻辑最大的问题在于其推理代价过于昂贵，命题逻辑是一阶逻辑的子集，近二十多年来随着命题可满足性（<span class="s10">satisfiability</span>，<span class="s10">SAT</span>）问题求解器效率的快速提高，其在人工智能中发挥着越来越重要的作用<span class="s20">[10]</span>。从本质上讲，<span class="s10">SAT </span>求解器提供的是一个通用的命题推理平台，但是其可应用于推理之外的多个组合优化领域。例如，自动规划问题是 <span class="s10">PSPACE </span>完全的，当规划解的长度被限制为多项式时，该问题为 <span class="s10">NP </span>完全问题，可编码为 <span class="s10">SAT </span>问题，著名的 <span class="s10">SatPlan </span>规划器<span class="s20">[11]</span>在该思想的基础上实现，其在国际规划竞赛中多次夺得第一名。另外，在有界模型检测（<span class="s10">bounded model checking</span>）<span class="s20">[12]</span>和回答集编程<span class="s20">[13]</span>等领域，<span class="s10">SAT</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 7pt;text-indent: 0pt;line-height: 139%;text-align: justify;">求解器都有重要应用。实际上，很多组合优化问题，通过编码为 <span class="s10">SAT</span>问题后再调用 <span class="s10">SAT </span>求解器的求解效率甚至高于直接求解原问题的效<span class="s21">率</span><span class="s22">[3]</span><span class="s21">。</span></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part35.htm">2.1.1 命题逻辑</a><a class="toc0" href="part36.htm">2.1.2 命题推理问题</a><a class="toc0" href="part37.htm">2.1.3 命题可满足性求解方法</a><a class="toc0" href="part38.htm">2.1.4 模型计数</a><a class="toc0" href="part39.htm">2.1.5 知识编译</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part33.htm">&lt; 上一个</a><span> | </span><a href="../%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%8E%9F%E7%90%86.html">内容</a><span> | </span><a href="part35.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
