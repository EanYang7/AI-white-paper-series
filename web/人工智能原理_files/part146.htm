<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="zh-cn" lang="zh-cn"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>7.6.2 上下文动态定价问题</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part145.htm">&lt; 上一个</a><span> | </span><a href="../%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%8E%9F%E7%90%86.html">内容</a><span> | </span><a href="part147.htm">下一个 &gt;</a></p><p class="s14" style="padding-left: 7pt;text-indent: 0pt;line-height: 22pt;text-align: left;"><a name="bookmark151">7.6.2 </a><span class="h4">上下文动态定价问题</span></p><p class="s11" style="padding-top: 3pt;padding-left: 7pt;text-indent: 27pt;line-height: 138%;text-align: left;"><span class="p">在传统的动态定价问题中，我们一般假定买家对物品的估值服从一个概率分布。然而，在某些场景下，买家对物品的估值也可能与某些特征有关，即，</span>𝑣<span class="s15">𝑡</span><span class="s41"> </span>= 𝑤 · 𝑥<span class="s15">𝑡</span><span class="s41"> </span>+ 𝜃<span class="s15">0</span><span class="p">。其中，</span>𝑥<span class="s15">𝑡</span><span class="p">是特征，</span>𝜃<span class="s15">0</span><span class="p">是噪声。这类问题也被称为上下文动态定价问题。针对在这类重复拍卖中卖家的最大化收益的问题，有大量研究提出了不同的算法，这些算法通常是统计估计过程和在线学习技术的组合。 </span><span class="s10">Kareem Amin, Afshin Rostamizadeh </span><span class="s92">和</span><span class="s10">Umar Syed </span><a href="part336.htm#bookmark718" style=" color: #202429; font-family:仿宋, monospace; font-style: normal; font-weight: normal; text-decoration: none; font-size: 14pt;">第一次考虑了重复的上下文拍卖问题</a><span class="s20">[8]</span><span class="s10"> </span><span class="s92">。他们分别考虑了在重复的上下文拍卖中诚实的买家和</span><span class="p">盈余最大化的</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 7pt;text-indent: 0pt;line-height: 139%;text-align: left;">买家这两种情况。前者是只聚焦于当前轮次的收益，而后者可能放弃短期盈余，通过一个策略性的出价来诱导卖家的算法在未来设定更低的保留价格以获得长期收益。针对这两种买家，作者提出了一种 <span class="s10">LEAP </span>算法， 并分别给出了针对不同买家这个算法的界。这个算法把卖家的策略分成了两个阶段。在第一个阶段，卖家在买家对物品估值的分布的支撑内随机报价，根据买家是否购买物品来估计<span class="s11">𝑤</span>。在第二个阶段， 卖家根据第一个</p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;">阶段估计的<span class="s11">𝑤</span>来确定保留价。随后， 对于诚实的买家， 作者证</p><p class="s61" style="padding-left: 205pt;text-indent: 0pt;line-height: 8pt;text-align: left;">2           <span class="s93">&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="6" height="1" alt="image" src="Image_042.png"/></span></p><p class="s11" style="padding-left: 7pt;text-indent: 0pt;line-height: 16pt;text-align: left;"><span class="p">明了这个算法的遗憾界是</span>𝑂(𝑇<span class="s91">3</span><span class="s94">      </span>√𝑙𝑜𝑔 (𝑇 𝑙𝑜𝑔 (𝑇)))<span class="p">。对于盈余</span></p><p style="padding-top: 7pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">最大化的买方，作者对 <span class="s10">LEAP </span>算法进行了微调，并证明了该算</p><p class="s61" style="padding-left: 142pt;text-indent: 0pt;line-height: 7pt;text-align: left;">2</p><p style="text-indent: 0pt;text-align: left;"><span><img width="6" height="1" alt="image" src="Image_043.png"/></span></p><p class="s11" style="padding-left: 7pt;text-indent: 0pt;line-height: 18pt;text-align: justify;"><span class="p">法能获得次线性</span>𝑂<span class="s73">̃</span>(𝑇<span class="s91">3</span>)<span class="p">的遗憾。这也是在上下文环境下第一个</span></p><p class="s61" style="padding-bottom: 3pt;padding-left: 62pt;text-indent: 0pt;line-height: 7pt;text-align: left;">2</p><p style="padding-left: 62pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="6" height="0" alt="image" src="Image_044.png"/></span></p><p class="s11" style="padding-left: 7pt;text-indent: 0pt;line-height: 14pt;text-align: justify;"><span class="p">获得</span>𝑂<span class="s73">̃</span>(𝑇<span class="s91">3</span>)<span class="p">的遗憾的算法。但这个研究并没有针对噪声</span>𝜃<span class="s15">0</span><span class="p">进行建</span></p><p style="padding-top: 5pt;padding-left: 7pt;text-indent: 0pt;text-align: justify;">模，后续的许多研究开始针对<span class="s11">𝜃</span><span class="s17">0</span>进行建模以获得更好的遗憾界。</p><p class="s10" style="padding-top: 7pt;padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: justify;">Javanmard <span class="p">和 </span>Nazerzadeh <a href="part336.htm#bookmark719" class="a">考虑了一个保留价定价问题</a><span class="s20">[9]</span> <span class="p">。同样是与上一篇研究相同的场景。在一个只有一个买家和一个卖家的重复的拍卖中，卖家每一轮给买家设置一个保留价，买家决定是否购买物品。如果购买，则需要支付保留价。买家对物品的估值</span><span class="s11">𝑣</span><span class="s15">𝑡</span><span class="s41"> </span><span class="s11">= 𝑤 · 𝑥</span><span class="s15">𝑡</span><span class="s41"> </span><span class="s11">+ 𝜃</span><span class="s15">0</span><span class="p">。在这个模型下，卖家的预期收入表示为</span></p><p class="s11" style="padding-left: 7pt;text-indent: 0pt;line-height: 18pt;text-align: justify;">𝑝 × 𝑃(𝑣<span class="s15">𝑡</span><span class="s41"> </span>≥ 𝑝) = 𝑝(1 − 𝐹(𝑝 − 𝑤<span class="s15">𝑡</span><span class="s41"> </span>⋅ 𝑥<span class="s15">𝑡</span>))<span class="p">，其中</span>𝑝<span class="p">表示卖家设置的保</span></p><p class="s92" style="padding-top: 5pt;padding-left: 7pt;text-indent: 0pt;line-height: 138%;text-align: justify;"><span style=" color: #000;">留价， </span><span class="s11">𝐹(𝑝 − 𝜃</span><span class="s15">0</span><span class="s41"> </span><span class="s11">⋅ 𝑥</span><span class="s15">𝑡</span><span class="s11">)</span><span style=" color: #000;">则表示买家对物品的估值小于卖家设置的保留价的概率。卖家想要确定最优的保留价只需要最大化预期收入。为此，作者提出了一个基于正则极大似然估计的最大化卖家收入的算法—— </span><span class="s10">RMLP</span><span style=" color: #000;">。该算法与 </span><span class="s10">Kareem Amin, Afshin Rostamizadeh </span>和 <span class="s10">Umar Syed </span>所提出的算法类似，依然是分为两个阶段。在第一个阶段，卖家随机报价并利用正则极大似然估计来估计<span class="s95">𝑤</span>.第二个阶段，根据估计出来的<span class="s95">𝑤</span>，卖家设置保留价。与 <span class="s10">LEAP </span>算法不同的是，<span class="s10">RMLP </span>将 <span class="s96">T </span>轮分成了 <span class="s96">K </span>个阶段，在每个阶段分别运行上述</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 3pt;padding-left: 7pt;text-indent: 0pt;line-height: 139%;text-align: left;"><span class="s92">两个过程。</span>RMLP <span class="s92">算法假设市场噪声分布是已知的，并基于该知识形成对数似然函数。随后，对于一个事先知道选择模型参数的透视者，作者分析了 </span><span style=" color: #202429;">RMLP </span><span class="s92">政策的遗憾，并证明了它达到了</span><span class="s95">𝑂(𝑠</span><span class="s98">0</span><span class="s95">𝑙𝑜𝑔𝑑 · 𝑙𝑜𝑔𝑇)</span><span class="s92">的遗憾。其中，</span><span class="s95">𝑠</span><span class="s98">0</span><span class="s92">表示</span><span class="s95">𝑤</span><span class="s92">的非零坐标数，</span><span class="s95">𝑑</span><span class="s92">表示</span><span class="s95">𝑥_𝑡</span><span class="s92">的维数。值得注意的是，这个</span><span class="p">模型需要假设了解随机噪音的分布，这在某些实际生活中的场景下是难以实现的。为此，</span>Yiyun Luo, Will Wei Sun <span class="p">和 </span>Yufeng Liu<span class="p">提出了一个</span>DIP <a href="part336.htm#bookmark720" class="a">模型来解决这个问题</a><span class="s20">[10]</span> <span class="p">。他们考虑了一个重复拍卖的模型。在 </span>Javanmard <span class="p">和 </span>Nazerzadeh <span class="p">提出的模型的基础上，作者进一步假设卖家不知道随机噪声的概率分布。与 </span>Javanmard <span class="p">和 </span>Nazerzadeh <span class="p">的模型相似， 作者依然是通过最大化</span><span class="s11">𝑝(1 − 𝐹(𝑝 −</span></p><p class="s11" style="padding-left: 7pt;text-indent: 0pt;line-height: 132%;text-align: left;">𝑤<span class="s15">𝑡</span><span class="s41">  </span>⋅ 𝑥<span class="s15">𝑡</span>))<span class="p">来获得最优的保留价。但是，在这个模型里面，作者是将买家能否获得产品看作了一个二元分类问题， 即</span>𝑦<span class="s15">𝑡</span><span class="s41"> </span>= 1<span class="s15">𝑣</span><span class="s99">𝑡</span><span class="s15">≥ </span><span class="s41">𝑝</span><span class="s100">𝑡</span><span class="p">。在在线学习中，总时间跨度</span>𝑇<span class="p">通常是未知的。为了解决这个问题，作者采用了在线学习和多臂赌博机算法中广泛使用的加倍技巧，将时间跨度切割成若干阶段。从第二个阶段开始， </span></p><p style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;line-height: 139%;text-align: justify;">作者将下一阶段的长度设定为当前阶段的两倍，直到重复拍卖结束。在每个阶段，卖家运行两个算法。第一个算法是使用逻辑回归来估计<span class="s11">𝑤</span>的值。第二个阶段是使用改进的 <span class="s10">UCB </span>算法来确</p><p style="padding-left: 7pt;text-indent: 0pt;text-align: justify;">定当前阶段的保留价。最后， 作者证明了该算法的遗憾界是</p><p class="s61" style="padding-left: 41pt;text-indent: 0pt;line-height: 8pt;text-align: left;">2</p><p style="text-indent: 0pt;text-align: left;"><span><img width="6" height="1" alt="image" src="Image_045.png"/></span></p><p class="s16" style="text-indent: 0pt;line-height: 10pt;text-align: left;">1</p><p style="text-indent: 0pt;text-align: left;"/><p class="s11" style="padding-left: 7pt;text-indent: 0pt;line-height: 17pt;text-align: left;">𝑂<span class="s17">𝑑</span> (𝑇<span class="s91">3</span><span class="s94"> </span>+    ||𝜃 − 𝜃<span class="s17">0</span>||    𝑇)<span class="p">。在此之后，</span><span class="s10">Jianqing Fan, Yongyi Guo </span><span class="p">和</span></p><p class="s10" style="padding-top: 7pt;padding-left: 7pt;text-indent: 0pt;text-align: justify;">Mengxin Yu <span class="p">引入了非参数方法来解决上下文重复拍卖的问题</span></p><p style="padding-top: 7pt;padding-left: 7pt;text-indent: 0pt;line-height: 138%;text-align: justify;"><span class="s20">[11]</span><span class="s10"> </span>。他们的模型与 <span class="s10">Yiyun Luo, Will Wei Sun </span>和 <span class="s10">Yufeng Liu </span>的模型相同，依然是考虑了线性函数的估值、未知的随机噪声的概率分布、最大化<span class="s11">𝑝(1 − 𝐹(𝑝 − 𝑤</span><span class="s15">𝑡</span><span class="s41"> </span><span class="s11">⋅ 𝑥</span><span class="s15">𝑡</span><span class="s11">))</span>来获得最优的保留价<span class="s11">𝑝</span>、使用在线学习和多臂赌博机算法中广泛使用的加倍技巧来划分总时间跨度和先估计 <span class="s39">w </span>后根据 <span class="s39">w </span>设置保留价。与 <span class="s10">Yiyun Luo </span>等人所使用的逻辑回归的技术不同的是，<span class="s10">Fan Jianqing </span>等人直接使用非参</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 7pt;text-indent: 0pt;line-height: 139%;text-align: left;">数统计中常用的 <span class="s10">Nadaraya-Watson </span>核回归方法给出了<span class="s11">𝜃</span><span class="s17">0</span>的累积分布函数 <span class="s39">F </span>和 <span class="s39">F </span>的一阶导数<span class="s11">𝐹′ </span>的估计。 然后， 再通过最 大 化</p><p class="s11" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">𝑝(1 − 𝐹(𝑝 − 𝑤<span class="s17">𝑡</span> ⋅ 𝑥<span class="s17">𝑡</span>))<span class="p">来估计</span>𝑤<span class="p">。同样，作者给出了这个算法的</span></p><p class="s61" style="padding-left: 97pt;text-indent: 0pt;line-height: 7pt;text-align: left;">2𝑚+1</p><p style="text-indent: 0pt;text-align: left;"><span><img width="31" height="1" alt="image" src="Image_046.png"/></span></p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 18pt;text-align: left;">遗憾界<span class="s11">𝑂</span><span class="s73">̃</span><span class="s11">((𝑇𝑑)</span><span class="s91">4𝑚−1</span><span class="s11">)</span>。这样做与 <span class="s10">Javanmard </span>等人以及 <span class="s10">Yiyun Luo </span>所</p><p style="padding-top: 7pt;padding-left: 7pt;text-indent: 0pt;line-height: 139%;text-align: left;">提出的方法相比，能用更少的假设来实现更好的遗憾界。与其他非参数方法的相比，这个方法能够很好的适用当维数<span class="s11">𝑑</span>很大的时候的场景。与一些基于<span class="s10">bandit </span>的算法相比，这个的算法也很容易实现。</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part145.htm">&lt; 上一个</a><span> | </span><a href="../%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%8E%9F%E7%90%86.html">内容</a><span> | </span><a href="part147.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
