<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="zh-cn" lang="zh-cn"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>7.2.2 合作博弈的表示和算法</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part124.htm">&lt; 上一个</a><span> | </span><a href="../%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%8E%9F%E7%90%86.html">内容</a><span> | </span><a href="part126.htm">下一个 &gt;</a></p><p class="s14" style="padding-left: 7pt;text-indent: 0pt;line-height: 22pt;text-align: left;"><a name="bookmark130">7.2.2 </a><span class="h4">合作博弈的表示和算法</span></p><p style="padding-top: 3pt;padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: left;">在定义合作博弈的特征函数时，列出每个联盟及其价值是最直接的表示法。但是，随着玩家数量的增加，联盟的数量呈指数级增长，在大多实际应用场景下并不实用。因此，需要一种更简洁的表示形式。但是，一个简单的计数论证表明，没有任何一种语言可以一般性地简洁，即使用<span class="s10">poly(</span><span class="s39">n</span><span class="s10">)</span>位，编码 <span class="s39">n </span>个局中人的特征函数。</p><p style="padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: justify;">目前比较流行的方法有两种：第一种是组合优化合作博弈：我们可以专注于通过<span class="s10">“</span>小型<span class="s10">”</span>组合结构定义的博弈子类。虽然这种表示法可能无法普遍地表达（即可能存在无法用这种方式表示的特征函数），但它确保具备简洁性。这种方法在理论计算机科学和运筹学文献中得到了广泛关注。第二种是面向一些有用的合作博弈子类，我们去开发出普遍表达的表示语言，并用这些表示语言对博弈子类进行简洁的描述。在多智能体系统文献中最近提出了几种这类语言。另外，黑箱模型也经常用于特征函数的输出，即允许有一个有效的算法，当给定一个联盟时，其输出是其价值。在本节中，我们主要聚焦第一种组合优化博弈类型，列举几类常见的组合优化博弈问题和相关结果。</p><p class="s10" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">7.2.2.1 <span class="s37">导出子图博弈（</span>Induced Subgraph Games<span class="s37">）</span></p><p style="padding-top: 7pt;padding-left: 7pt;text-indent: 27pt;line-height: 140%;text-align: left;">导出子图博弈最早是由邓小铁和 <a href="part332.htm#bookmark627" class="s5">Papadimitriou</a><a href="part332.htm#bookmark627" class="s33">[17</a><span class="s20">]</span><span class="s10">   </span>提出，主要思 想为：给定一个无向权重图<span class="s11">𝒢 = (𝑁, 𝐸)</span>，每一条边<span class="s11">(𝑖, 𝑗)  </span>的权重记为<span class="s11">𝑤</span><span class="s15">𝑖,𝑗</span>，</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s11" style="padding-top: 3pt;padding-left: 7pt;text-indent: 0pt;text-align: left;"><span class="p">并令</span>𝐰 = (𝑤<span class="s17">𝑖,𝑗</span>)<span class="s72">𝑖,𝑗∈𝑁</span><span class="p">。一个导出子图博弈</span>𝐺 = (𝒢, 𝐰)<span class="p">基于局中人集合</span>𝑁</p><p style="padding-top: 1pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">和特征函数<span class="s11">𝑣</span>，其中<span class="s11">𝑣</span>满足对于任意联盟<span class="s11">𝐶 ⊆ 𝑁</span>，<span class="s11">𝑣(𝐶)</span>定义为以点集<span class="s11">𝐶</span></p><p style="padding-top: 7pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">导出的子图的边权之和，即</p><p class="s70" style="padding-top: 1pt;padding-left: 30pt;text-indent: 0pt;line-height: 19pt;text-align: center;"><span class="s73">𝑣(𝐶) = ∑</span><span class="s74">(</span>𝑖,𝑗<span class="s74">)</span>∈𝐸<span class="s16"> </span><span class="s73">𝑤</span>𝑖,𝑗<span class="s75">。</span></p><p class="s16" style="padding-left: 36pt;text-indent: 0pt;line-height: 12pt;text-align: center;">{𝑖,𝑗}⊆𝐶</p><p style="padding-top: 5pt;padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: left;">显然，诱导子图博弈的表示就是简洁的，因为我们只要编码边权重，所需的位数是 <span class="s39">n = |N|</span>的多项式，即使用邻接矩阵来表示图仅需要</p><p class="s16" style="text-indent: 0pt;line-height: 10pt;text-align: left;">2</p><p style="text-indent: 0pt;text-align: left;"/><p class="s16" style="text-indent: 0pt;line-height: 10pt;text-align: left;">2</p><p style="text-indent: 0pt;text-align: left;"/><p class="s10" style="padding-left: 7pt;text-indent: 0pt;line-height: 139%;text-align: left;"><span class="s11">𝑛</span><span class="s19">2</span><span class="p">个元素。当所有边权均为非负数时，诱导子图博弈不仅是单调的，而且是凸的，因此保证具有非空核心。邓小铁和 </span><a href="part332.htm#bookmark627" class="s5">Papadimitriou</a><a href="part332.htm#bookmark627" class="s33">[17</a><span class="s20">]</span>   <span class="p">设 计了一个基于网络流的有效算法，去判定任意一个结果是否在核心内。相比之下，如果权重可以为负数，则确定核心是否为空是 </span>NP <span class="p">完全问 题，而检查特定结果是否在核心中是 </span>co-NP <a href="part332.htm#bookmark627" class="a">完全问题</a><a href="part332.htm#bookmark627" class="s33">[17</a><span class="s20">]</span>   <span class="p">。此外，</span>Greco <a href="part332.htm#bookmark628" class="a">等人</a><a href="part332.htm#bookmark628" class="s33">[18</a><span class="s20">]</span>   <span class="p">最近表明，检查一个结果是否在核中是</span><span class="s11">Δ</span><span class="s19">𝑝</span>-<span class="p">完全问题，而检查 一个结果是否在谈判集中是</span><span class="s11">𝛱</span><span class="s19">𝑝</span>-<span class="p">完全问题。邓小铁和 </span><a href="part332.htm#bookmark627" class="s5">Papadimitriou</a><a href="part332.htm#bookmark627" class="s33">[17</a><span class="s20">] </span><span class="p">表明，导出子图博弈可以使用高效的算法计算 </span>Shapley <span class="p">值。</span></p><p class="s10" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">7.2.2.2 <span class="s37">网络流博弈（</span>Network Flow Games<span class="s37">）</span></p><p style="padding-top: 7pt;padding-left: 7pt;text-indent: 27pt;line-height: 138%;text-align: left;"><a href="part332.htm#bookmark629" class="a">在网络流博弈</a><span class="s20">[19]</span><a href="part332.htm#bookmark629" class="s5"> </a><span class="s20">[20]</span><span class="s10"> </span>中，局中人是起点为 <span class="s39">s </span>和终点为 <span class="s39">t </span>的网络中的边，即边集<span class="s11">𝐸</span>。每个边（局中人）<span class="s11">𝑒 ∈ 𝐸</span>都具有一个正整数容量<span class="s11">𝑐</span><span class="s15">𝑒</span>，表示它可以承载多少流量。联盟<span class="s11">𝐶</span>的价值<span class="s11">𝑣(𝐶)</span>是仅使用<span class="s11">𝐶</span>中的边从 <span class="s39">s </span>到 <span class="s39">t </span>可以发送的最大流量。<span class="s10">Granot </span>和 <a href="part332.htm#bookmark630" class="s5">Granot</a><span class="s20">[21]</span><span class="s10"> </span><a href="part332.htm#bookmark631" class="a">研究了该类博弈的几个与稳定性相关的解概念。随后，邓小铁等人</a><span class="s20">[22]</span><span class="s10"> </span>表明，在单位容量的情况下，可以有效地计算网络流博弈的核心，但在一般情况下是困难的。</p><p style="padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: justify;"><span class="s10">Bachrach </span>和 <a href="part332.htm#bookmark632" class="s5">Rosenschein</a><span class="s20">[23]</span><span class="s10"> </span>引入网络流博弈的一个变种称为阈值网络流博弈，其目的是从起点 <span class="s39">s </span>发送至少 <span class="s39">k </span>个单位到终点 <span class="s39">t</span>：如果联盟可以承载大小为 <span class="s39">k </span>的 <span class="s39">s-t </span>流，则其价值为 <span class="s10">1</span>，否则为 <span class="s10">0</span>。随后由 <span class="s10">Aziz </span><a href="part332.htm#bookmark633" class="a">等人</a><span class="s20">[24]</span><span class="s10"> </span>和 <span class="s10">Resnick </span><a href="part332.htm#bookmark634" class="a">等人</a><span class="s20">[25]</span><span class="s10"> </span>进行了研究。<span class="s10">Bachrach </span><a href="part332.htm#bookmark632" class="a">等人</a><span class="s20">[23]</span><span class="s10"> </span>表明，在阈值网络流博弈中计算 <span class="s10">Banzhaf </span><a href="part332.htm#bookmark619" class="a">指数</a><span class="s20">[8]</span><span class="s10"> </span>是<span class="s10">#P-</span>完全的。事实上，</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 3pt;padding-left: 7pt;text-indent: 0pt;line-height: 139%;text-align: justify;"><span class="p">甚至判定一个玩家是否是无贡献者，也是计算困难的。但是，</span>Bachrach<a href="part332.htm#bookmark632" class="a">等人</a><span class="s20">[23]</span> <span class="p">给出了在一些特殊的图类下，可以有效地计算 </span>Banzhaf <span class="p">指数。</span></p><p class="s10" style="padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: justify;"><a href="part332.htm#bookmark635" class="a">网络流博弈的另一个特例是指派博弈</a><span class="s20">[26]</span> <span class="p">。在指派博弈中，局中人是加权二分图的顶点。每个联盟的价值是其最大权匹配的大小。相比于网络流博弈，指派博弈具有额外的结构，使其更易处理。</span>Granot<span class="p">和 </span><a href="part332.htm#bookmark630" class="s5">Granot</a><span class="s20">[21]</span> <a href="part332.htm#bookmark636" class="a">研究了指派博弈的稳定性，并展示了核心、核和核仁的关系；后来他们的结果被用于设计一个多项式时间算法来计算分配博弈中的核仁</a><span class="s20">[27]</span> <a href="part332.htm#bookmark637" class="a">。匹配博弈</a><span class="s20">[28]</span> <span class="p">是指派博弈的一种推广，其中图不需要是二分图。</span>Kern <span class="p">和 </span><a href="part332.htm#bookmark638" class="s5">Paulusma</a><span class="s20">[29]</span> <span class="p">研究了这些博弈中核心、最小核心和核仁的计算复杂性。</span></p><p class="s10" style="padding-left: 7pt;text-indent: 0pt;text-align: left;">7.2.2.3 <span class="s37">最小费用支撑树博弈（</span>Minimum Cost Spanning Tree Games<span class="s37">）</span></p><p style="padding-top: 7pt;padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: left;"><a href="part332.htm#bookmark639" class="a">到目前为止考虑的所有博弈都是盈利博弈，即博弈中每个联盟的 价值都是正的，但最小费用支撑树博弈</a><span class="s20">[30]</span><span class="s10"> </span>不同于所有其他博弈，因 为它们是费用分摊博弈而不是盈利博弈，即每个联盟的价值是非正的。详细地，一个最小费用支撑树博弈由局中人集合<span class="s11">𝑁</span>、一个供应商 <span class="s39">s</span>、 一个完全权重图<span class="s11">𝒢 = (𝑁 ∪ {𝑠}, 𝐸)</span>和费用<span class="s11">𝑐</span><span class="s15">𝑖,𝑗</span><span class="s41"> </span>组成。一个联盟<span class="s11">𝐶</span>的价值</p><p style="padding-left: 7pt;text-indent: 0pt;line-height: 17pt;text-align: justify;"><span class="s11">𝑣(𝐶)</span>为该联盟成员和 <span class="s39">s </span>组成的点集形成的最小支撑树的花费。不难发</p><p class="s20" style="padding-top: 7pt;padding-left: 7pt;text-indent: 0pt;line-height: 139%;text-align: justify;"><a href="part332.htm#bookmark640" class="a">现，最小费用支撑树博弈的核心非空</a>[31]<span class="s10"> </span><span class="p">。然而，</span><span class="s10">Faigle </span><a href="part332.htm#bookmark641" class="a">等人</a>[32]<a href="part332.htm#bookmark642" class="s5"> </a>-[33]<span class="p">表明，判定给定结果是否属于核心，并计算最小核心和核仁的问题是 </span><span class="s10">NP </span><span class="p">难的。</span></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part124.htm">&lt; 上一个</a><span> | </span><a href="../%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%8E%9F%E7%90%86.html">内容</a><span> | </span><a href="part126.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
