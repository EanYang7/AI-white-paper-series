<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="zh-cn" lang="zh-cn"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>3.1.4 大规模并行计算</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part61.htm">&lt; 上一个</a><span> | </span><a href="../%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%8E%9F%E7%90%86.html">内容</a><span> | </span><a href="part63.htm">下一个 &gt;</a></p><p class="s14" style="padding-left: 7pt;text-indent: 0pt;line-height: 22pt;text-align: left;"><a name="bookmark63">3.1.4 </a><span class="h4">大规模并行计算</span></p><p style="padding-top: 3pt;padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: left;">大规模并行计算模型是对现实世界中并行计算系统框架进行数学抽象的一种方式，这些系统包括 <span class="s10">MapReduce</span>、<span class="s10">Hadoop</span>、<span class="s10">Spark </span>和 <span class="s10">Dryad </span>等。这个模型处理的是如下场景：由于图的规模太大，我们将图的边任意地存储在若干个机器上。每个机器存储图的部分数据，且这些机器的总空间几乎是整个图大小的线性函数。计算在同步轮次中进行。在每一轮中，每台机器本地对存储在本地的数据执行一些计算，然后与其他机器交换消息。这个过程可以被抽象为通信模型，其中每</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 7pt;text-indent: 0pt;line-height: 139%;text-align: justify;">台机器在每一轮中创建消息包，并将其加载到路由网络中。每台机器的空间大小也隐含地反映了大规模并行计算模型中的通信瓶颈。局部计算通常在线性或近线性时间内运行，在大规模并行计算算法的分析中通常被忽略，因为通信是瓶颈。大规模并行计算模型中算法设计的目标是使用尽可能少的通信轮次来尽可能准确地对数据进行分析。</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part61.htm">&lt; 上一个</a><span> | </span><a href="../%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%8E%9F%E7%90%86.html">内容</a><span> | </span><a href="part63.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
