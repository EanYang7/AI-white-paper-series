<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="zh-cn" lang="zh-cn"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>4.1.3 作业调度问题</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part71.htm">&lt; 上一个</a><span> | </span><a href="../%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%8E%9F%E7%90%86.html">内容</a><span> | </span><a href="part73.htm">下一个 &gt;</a></p><p class="s14" style="padding-left: 7pt;text-indent: 0pt;line-height: 22pt;text-align: left;"><a name="bookmark73">4.1.3 </a><span class="h4">作业调度问题</span></p><p style="padding-top: 3pt;padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: justify;">作业调度问题（<span class="s10">JSSP</span>）是计算机科学和运筹学中广泛研究的组合优化问题，在制造业和交通运输等行业中有着广泛的应用。在 <span class="s10">JSSP</span>中，许多具有预定义约束的作业被分配给一组异构机器，该问题的求解目标为最小化完工时间、流动时间或延迟。优先级调度方法（<span class="s10">PDR</span>）是在实际中被广泛应用的一种高效启发式算法。<span class="s10">PDR </span>计算快速、直观且易于实现。然而，设计一个有效的 <span class="s10">PDR </span>需要大量的领域知识和试错，特别是对于复杂的调度问题。机器学习可以很好的发掘实例的共同特征，且通过大量实例训练得到的模型表现往往相对稳定。因此，</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">人们越来越关注调度问题的机器学习求解方法。</p><p class="s10" style="padding-top: 7pt;padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: left;"><span class="p">调度问题通常基于端到端的图学习方法进行求解。例如，</span>Wang <a href="part328.htm#bookmark482" class="a">等人</a><a href="part328.htm#bookmark482" class="s33">[24</a><span class="s20">]</span>   <span class="p">提出了一种基于图深度学习的动态调度方法，采用近端策略优化来寻找调度的最优策略，以应对由于问题规模增加而导致的状态和行动空间维度灾难。</span>Zhang  <a href="part328.htm#bookmark483" class="a">等人</a><a href="part328.htm#bookmark483" class="s33">[25</a><span class="s20">]</span>   <span class="p">通过端到端图深度学习获得调度的公共模式，并应用训练得到的模型来自动学习分配优先级。</span>Zhang<a href="part328.htm#bookmark483" class="a">等人</a><a href="part328.htm#bookmark483" class="s33">[25</a><span class="s20">]</span>   <span class="p">使用离散图表示调度问题，提出了一种基于图神经网络求解调度过程中的状态，有效的提高了泛化性能。然而，上述学习方法没有考虑到作业车间调度问题中决策顺序对整体求解的影响，影响了求解的质量。为了克服决策顺序对问题求解质量的影响，</span>Park  <a href="part328.htm#bookmark484" class="a">等人</a><a href="part328.htm#bookmark484" class="s33">[26</a><span class="s20">]</span><span class="p">提出了使用图神经网络来学习作业车间调度问题的框架。将 </span>JSSP <span class="p">的调度过程建模为一个具有图表示的序列决策问题，随后使用 </span>GNN <span class="p">来学习节点特征，通过节点特征学习最佳调度。</span>Jeon <a href="part328.htm#bookmark485" class="a">等人</a><a href="part328.htm#bookmark485" class="s33">[27</a><span class="s20">]</span>   <span class="p">提出了一种基于机器学习的序列调度器，该调度器使用 </span>one-shot <span class="p">图神经网络编码器对节点序列优先级进行采样，通过列表调度将节点序列优先级转换为最终调度。</span>Park <a href="part328.htm#bookmark486" class="a">等人</a><a href="part328.htm#bookmark486" class="s33">[28</a><span class="s20">]</span>   <span class="p">提出了一种基于图深度学习的实时调度器 </span>ScheduleNet<span class="p">。具体的，</span>ScheduleNet <span class="p">首先将多代理调度问题建模为具有连续奖励的 </span>semi-MDP<span class="p">，用智能体（</span>Agent<span class="p">）任务图表示调度问题的状态，利用类型感知图注意力提取智能体和任务节点的节点嵌入，最终用计算出的节点嵌入计算调度分配概率。</span></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part71.htm">&lt; 上一个</a><span> | </span><a href="../%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%8E%9F%E7%90%86.html">内容</a><span> | </span><a href="part73.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
