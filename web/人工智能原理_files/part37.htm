<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="zh-cn" lang="zh-cn"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>2.1.3 命题可满足性求解方法</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part36.htm">&lt; 上一个</a><span> | </span><a href="../%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%8E%9F%E7%90%86.html">内容</a><span> | </span><a href="part38.htm">下一个 &gt;</a></p><p class="s14" style="padding-left: 7pt;text-indent: 0pt;line-height: 22pt;text-align: justify;"><a name="bookmark37">2.1.3 </a><span class="h4">命题可满足性求解方法</span></p><p style="padding-top: 3pt;padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: left;">当命题知识库表示为 <span class="s10">CNF </span>公式时，目前高效的 <span class="s10">SAT </span>求解能较好 地解决一致性判定这一问题，在某些情况下甚至可在较短的时间内判 定出多达上百万个变量的知识库的一致性。对于其他命题推理任务中，除模型计数、模型枚举以及计算最小度外，也可通过调用一次或线性 次 <span class="s10">SAT </span>求解器进行求解。例如，对于子句蕴含问题，<span class="s23"></span>蕴含<span class="s23"></span>当且仅 当<span class="s23"></span><span class="s10"> </span><span class="s23"></span><span class="s10"> </span><span class="s23"></span>可满足。又如，对于知识库间蕴含问题，<span class="s23"></span>蕴含<span class="s23"></span>当且仅当对 于任意<span class="s23"></span><span class="s10"> </span><span class="s23"></span><span class="s10"> </span><span class="s23"></span>都有<span class="s23"></span>蕴含<span class="s23"></span>。<span class="s10">SAT </span>问题是第一个被证明为 <span class="s10">NP </span>完全的问 题，<span class="s10">Cook </span>也因此获得了图灵奖。</p><p class="s10" style="padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: left;">SAT <span class="p">求解方法主要可分为完备和非完备两类，前者能判断出可满 足性并对于可满足的问题能给出解，后者对于不可满足的问题无法给 出判断。完备的求解方法中使用最广的为 </span>DPLL <a href="part327.htm#bookmark300" class="a">算法</a><span class="s20">[5]</span><a href="part327.htm#bookmark300" class="s5"> </a><span class="s20">[23]</span> <span class="p">，最早由 </span>Davis <span class="p">和 </span>Putnam <span class="p">于 </span>1960 <span class="p">年提出，并在 </span>1962 <span class="p">年由 </span>Davis<span class="p">、</span>Logemann<span class="p">、 </span>Loveland <span class="p">进行进一步的优化，这是一种搜索树上的深度优先搜索算法，</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 3pt;padding-left: 7pt;text-indent: 0pt;line-height: 139%;text-align: left;"><span class="p">它结合了单文字规则、纯文字规则等缩小搜索空间，主要思想是在公 式的所有部分赋值的空间中进行回溯搜索。在 </span>DPLL <span class="p">框架下，研究人 员通过嵌入多种优化技术实现了多个高效的求解器，最著名优化技术 为 </span>1996 <span class="p">年 </span>Silva <span class="p">和 </span><a href="part327.htm#bookmark309" class="s5">Sakallah</a><a href="part327.htm#bookmark309" class="s33">[24</a><span class="s20">]</span>   <span class="p">在求解器 </span>GRASP <span class="p">中提出的冲突学习 技术，后续的完备的求解器都使用到了这项技术，该技术通过对冲突 进行分析学习新子句缩减搜索空间，极大的提高了 </span>DPLL  <span class="p">方法的效 率，现代的 </span>SAT  <span class="p">求解都使用到了这项技术，对应的求解器也被称为 基于冲突的子句学习（</span>Conflict-driven clause learning<span class="p">，</span>CDCL<span class="p">）求解器。最经典的 </span>CDCL   <span class="p">求解器是 </span><a href="part327.htm#bookmark310" class="s5">MiniSAT</a><a href="part327.htm#bookmark310" class="s33">[25</a><span class="s20">]</span>    <span class="p">， 后续的很多求解器 </span><a href="part327.htm#bookmark311" class="s5">PrecoSAT</a><a href="part327.htm#bookmark311" class="s33">[26</a><span class="s20">]</span>   <span class="p">、</span><a href="part327.htm#bookmark312" class="s5">CryptoMiniSat</a><a href="part327.htm#bookmark312" class="s33">[27</a><span class="s20">]</span>   <span class="p">、</span><a href="part327.htm#bookmark313" class="s5">Kissa</a><a href="part327.htm#bookmark313" class="s33">t[28</a><span class="s20">]</span>   <span class="p">等都是在 </span>MiniSAT <span class="p">的源 代码基础上改进的。非完备求解方法多基于局部搜索，包括 </span><a href="part327.htm#bookmark314" class="s5">GSAT</a><a href="part327.htm#bookmark314" class="s33">[29</a><span class="s20">]</span>   <span class="p">、 </span><a href="part327.htm#bookmark315" class="s5">Walksat</a><a href="part327.htm#bookmark315" class="s33">[30</a><span class="s20">]</span>   <span class="p">、调查传播（</span>survey propagation<a href="part327.htm#bookmark316" class="a">）</a><a href="part327.htm#bookmark316" class="s33">[31</a><span class="s20">]</span>   <a href="part327.htm#bookmark317" class="a">、格局检测</a><a href="part327.htm#bookmark317" class="s33">[32</a><span class="s20">]</span>   <span class="p">等。自 </span>2002 <span class="p">开始，</span>SAT <span class="p">领域内每年举办一次 </span>SAT <span class="p">竞赛，也极大地推动了 </span>SAT <span class="p">问题求解效率的提高。</span></p><p style="padding-top: 1pt;padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: justify;">国内对于 <span class="s10">SAT </span>问题也取得了很多研究成果，早在 <span class="s10">2000 </span>年，中科院软件所张健研究员出版了一部关于可满足性求解器的专著，中科院软件所蔡少伟和华中科技大学何琨等研究组在 <span class="s10">SAT </span>竞赛中多次获得冠亚军，吉林大学欧阳丹彤团队在基于扩展规则的 <span class="s10">SAT </span>求解方面发表了一系列的成果。</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part36.htm">&lt; 上一个</a><span> | </span><a href="../%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%8E%9F%E7%90%86.html">内容</a><span> | </span><a href="part38.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
