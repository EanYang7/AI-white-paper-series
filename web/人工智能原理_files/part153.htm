<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="zh-cn" lang="zh-cn"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>8.2.1 HHL 算法</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part152.htm">&lt; 上一个</a><span> | </span><a href="../%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%8E%9F%E7%90%86.html">内容</a><span> | </span><a href="part154.htm">下一个 &gt;</a></p><p class="s14" style="padding-left: 7pt;text-indent: 0pt;line-height: 22pt;text-align: left;"><a name="bookmark158">8.2.1 HHL </a><span class="h4">算法</span></p><p style="padding-top: 3pt;padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: left;">线性方程是一个非常基础的概念，在人工智能和计算机科学的各个领域都会广泛应用<span class="s20">[1]</span>。线性方程的表达能力很强，能够用来建模刻</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 7pt;text-indent: 0pt;line-height: 139%;text-align: justify;">画并解决几乎所有的线性变化的问题，或者近似模拟很多复杂的大型系统。在回归分析中，最常使用的模型便是线性回归模型，即在对输入作初步处理后，用一个线性方程去解释现有数据，然后再对接下来出现的数据作预测。在计算机科学的其他领域中，比如数值分析，可以用线性方程求解算法来设计和分析新的算法<span class="s20">[2]</span>。在图论中，图上的随机游走亦可以写成一个线性约束，通过对该线性约束进行分析可以设计并且分析很多 <span class="s10">NPC </span>问题的近似算法。另外，线性方程还可以用于建模计算机网络模型、天气模型、金融市场和生态模型等等。</p><p style="padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: justify;">在数学上，一个线性方程由若干个变量和关于这些变量的线性约束组成。通常，需要求解的变量用一个向量 <span class="s10">x </span>表示。此时关于这些变量的线性约束就可以写成 <span class="s10">Ax=b </span>的形式，其中 <span class="s10">A </span>和一个矩阵，<span class="s10">b </span>为另外一个向量。求解这个线性方程即求解一个 <span class="s10">x </span>使得<span class="s10">Ax=b </span>成立。在该问题中，输入为矩阵 <span class="s10">A </span>和向量 <span class="s10">b</span>，输出为满足 <span class="s10">Ax=b </span>的向量 <span class="s10">x</span>。可以看到线性方程的求解与线性代数关系密切。在经典计算机科学中，对线性代数算法的研究很多。我们知道求解一个含有 <span class="s10">N </span>个变量的线性方程，至少需要的运算时间为也为 <span class="s10">N</span>：经典计算机至少需要逐个处理输入数据，并逐个输出解。</p><p style="padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: justify;">量子计算机在解决线性代数问题上有天然优势：得益于量子叠加态的存在，数个量子比特存在于一个指数维数的希尔伯特空间中。即一个由若干个量子比特组成的量子态就可以表示一个指数维度线性空间中的向量。同时，在该量子态上的所有量子操作亦可由线性变换表示。这使得量子态与线性空间有很简单自然的对应方式，因此，设计线性代数相关的算法也更容易。这个优势使得理论计算机科学家总是能在线性代数方向得到更优秀的算法，如矩阵求幂<span class="s20">[3]</span>。自然，我们也可以通过把矩阵和向量编码到量子态的方法，实现求解线性方程的更快的量子算法。然而，即使量子计算机有这个优点，仅仅依靠量子计算机从理论上并不能帮助我们更快地求出一个线性方程完整的解，</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 3pt;padding-left: 7pt;text-indent: 0pt;line-height: 139%;text-align: justify;">这是由于即使在量子计算机上得到一个解，这个解也是编码在一个量子态当中。由于量子态的不可复制性，对量子态进行层析得到量子态的完整信息依旧需要指数的时间复杂度。</p><p style="padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: left;">在实际生活中，一般不会需要求解一个线性方程的整个的解，而是只需要得到解的一些性质或关于解的信息，譬如它的权重、平均值等等，这些信息往往只需要一个实数刻画。例如，在网络模型中我们不关心最终的网络流量的具体分布，只关心流量的大小，或者是在天气模型中，我们关心某种天气出现的概率等等。当不需要得到一个线性方程的完整的解此时，我们就可以利用上上述量子计算机的优点而规避其弱点而设计出更高效的算法。这是因为关于这个线性方程的解的所有信息已经在一个量子态当中，虽然无法把它完整地提取出来，但是通过对这个量子态的一次测量，我们可以得到这个量子态的部分信息。只需要根据计算目标调整最终的量子测量，用精心构造的测量就可以用很小的代价从量子态当中提取出需要的信息，而不必获得整个解，此时，由于若干个量子态可以表示指数维度的线性空间，所以可以得到指数加速。</p><p style="padding-left: 7pt;text-indent: 27pt;line-height: 140%;text-align: justify;">基于以上想法，<span class="s10">HHL </span>算法最早由 <span class="s10">Harrow</span>，<span class="s10">Hassidim </span>和 <span class="s10">Lloyd </span>在 <span class="s10">2006 </span>年提出，并以他们命名<span class="s20">[4]</span>。在某些条件下，该算法只需要对数时间就能将一个线性方程组的解编码到一个量子态中并进行测量以得到目标信息。设需要求解的线性方程为 <span class="s10">Ax=b</span>，则当 <span class="s10">A </span>可逆时，解为 <span class="s10">x=A</span><span class="s20">-1</span><span class="s10">b</span>，故只需要求出 <span class="s10">b </span>在 <span class="s10">A </span>的逆矩阵下作用后的结果。</p><p class="s10" style="padding-left: 34pt;text-indent: 0pt;line-height: 17pt;text-align: justify;">HHL <a href="part153.htm#bookmark159" class="a">算法的基本流程为如图</a><a href="part153.htm#bookmark159" class="s5">8-1</a> <span class="p">所示：</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 199pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><span><img width="116" height="14" alt="image" src="Image_047.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="18" height="14" alt="image" src="Image_048.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="19" height="18" alt="image" src="Image_049.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="490" height="136" alt="image" src="Image_050.png"/></span></p><p class="s101" style="text-indent: 0pt;line-height: 8pt;text-align: left;">Phase estimation</p><p style="text-indent: 0pt;text-align: left;"/><p class="s101" style="text-indent: 0pt;line-height: 8pt;text-align: left;">Control rotation</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="19" height="14" alt="image" src="Image_051.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="30" height="16" alt="image" src="Image_052.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="18" height="17" alt="image" src="Image_053.png"/></span></p><p class="s24" style="padding-left: 3pt;text-indent: 0pt;text-align: center;"><a name="bookmark159">图 </a><span class="s25">8-1 HHL </span>算法的基本流程<span class="s102">[5]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 34pt;text-indent: 0pt;text-align: left;">（<span class="s10">1</span>）首先，把 <span class="s10">b </span>编码成一个量子态；</p><p style="padding-top: 7pt;padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: left;">（<span class="s10">2</span>）应用相位估计算法，把 <span class="s10">b </span>对应的量子态在<span class="s10">A </span>的特征空间上作分解，并求出各特征向量对应的特征值，存储在辅助量子比特上；</p><p style="padding-left: 34pt;text-indent: 0pt;text-align: left;">（<span class="s10">3</span>）将各特征值求逆作用在 <span class="s10">b </span>对应的量子态上；</p><p style="padding-top: 7pt;padding-left: 34pt;text-indent: 0pt;text-align: left;">（<span class="s10">4</span>）应用反向相位估计算法，清除辅助比特；</p><p style="padding-top: 7pt;padding-left: 7pt;text-indent: 27pt;line-height: 140%;text-align: left;">（<span class="s10">5</span>）此时计算的结果即是 <span class="s10">b </span>在 <span class="s10">A </span>的逆矩阵作用后的结果，以一个量子态的形式存在；</p><p style="padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: left;">（<span class="s10">6</span>）最终通过对这个量子态作一个合适的测量，就可以得到需要的信息。</p><p class="s10" style="padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: left;"><span class="p">经过发展，众多改进版本的 </span>HHL <a href="part153.htm#bookmark160" class="a">算法被提出，表 </a><a href="part153.htm#bookmark160" class="s5">8-1</a> <span class="p">给出了部分算法和它们的效率。</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse" cellspacing="0"><tr style="height:25pt"><td style="width:124pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s26" style="padding-top: 4pt;padding-right: 37pt;text-indent: 0pt;line-height: 20pt;text-align: right;">问题</p></td><td style="width:127pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s26" style="padding-top: 4pt;padding-left: 38pt;padding-right: 14pt;text-indent: 0pt;line-height: 20pt;text-align: center;">算法</p></td><td style="width:164pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s26" style="padding-top: 4pt;padding-left: 63pt;text-indent: 0pt;line-height: 20pt;text-align: left;">时间复杂度</p></td></tr><tr style="height:26pt"><td style="width:124pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 8pt;padding-right: 39pt;text-indent: 0pt;text-align: right;">LSP</p></td><td style="width:127pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s103" style="padding-top: 8pt;padding-left: 38pt;padding-right: 14pt;text-indent: 0pt;text-align: center;">CG<span class="s104">[7]</span></p></td><td style="width:164pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s105" style="padding-top: 8pt;padding-left: 39pt;text-indent: 0pt;text-align: left;">𝑂(𝑁𝑠𝜅 log(1/𝜖))</p></td></tr><tr style="height:25pt"><td style="width:124pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 8pt;padding-right: 34pt;text-indent: 0pt;text-align: right;">QLSP</p></td><td style="width:127pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s103" style="padding-top: 8pt;padding-left: 38pt;padding-right: 14pt;text-indent: 0pt;text-align: center;">HHL<span class="s104">[4]</span></p></td><td style="width:164pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s105" style="padding-top: 8pt;padding-left: 37pt;text-indent: 0pt;text-align: left;">𝑂(log(𝑁)𝑠<span class="s106">2</span>𝜅<span class="s106">2</span>/𝜖)</p></td></tr><tr style="height:26pt"><td style="width:124pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 8pt;padding-right: 34pt;text-indent: 0pt;text-align: right;">QLSP</p></td><td style="width:127pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 8pt;padding-left: 38pt;padding-right: 14pt;text-indent: 0pt;text-align: center;">VTAA-HHL<span class="s107">[8]</span></p></td><td style="width:164pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s105" style="padding-top: 8pt;padding-left: 40pt;text-indent: 0pt;text-align: left;">𝑂(log(𝑁)𝑠<span class="s106">2</span>𝜅/𝜖)</p></td></tr><tr style="height:25pt"><td style="width:124pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 8pt;padding-right: 34pt;text-indent: 0pt;text-align: right;">QLSP</p></td><td style="width:127pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 8pt;padding-left: 38pt;padding-right: 14pt;text-indent: 0pt;text-align: center;">Childs <span class="s27">等人</span><span class="s107">[9]</span></p></td><td style="width:164pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s105" style="padding-top: 8pt;padding-left: 29pt;text-indent: 0pt;text-align: left;">𝑂(𝑠𝜅𝑝𝑜𝑙𝑦𝑙𝑜𝑔(𝑠𝜅/𝜖))</p></td></tr><tr style="height:26pt"><td style="width:124pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s31" style="padding-top: 8pt;padding-right: 34pt;text-indent: 0pt;text-align: right;">QLSP</p></td><td style="width:127pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s103" style="padding-top: 8pt;padding-left: 38pt;padding-right: 14pt;text-indent: 0pt;text-align: center;">QLSA<span class="s104">[10]</span></p></td><td style="width:164pt;border-top-style:solid;border-top-width:1pt;border-left-style:solid;border-left-width:1pt;border-bottom-style:solid;border-bottom-width:1pt;border-right-style:solid;border-right-width:1pt"><p class="s105" style="padding-top: 8pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">𝑂(𝜅<span class="s106">2</span>𝑝𝑜𝑙𝑦𝑙𝑜𝑔(𝑛)‖𝐴‖<span class="s108">𝐹</span>/𝜖)</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"/><p class="s24" style="padding-left: 3pt;text-indent: 0pt;text-align: center;"><a name="bookmark160">表 </a><span class="s25">8-1 HHL </span>算法及改进版本<span class="s102">[6]</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s10" style="padding-top: 3pt;padding-left: 7pt;text-indent: 27pt;line-height: 139%;text-align: justify;">HHL <span class="p">算法在量子机器学习领域有诸多应用。</span>HHL <span class="p">算法实际上实现了对数时空复杂度的矩阵求逆算法。而矩阵求逆在有监督的机器学习算法中，如支持向量机，线性回归，贝叶斯分类器等等算法中都起着决定性的作用。</span>HHL <span class="p">算法为用量子计算机加速有监督机器学习提</span><span class="s21">供了算法基础</span><span class="s22">[5, 11-19]</span><span class="s21">。</span></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part152.htm">&lt; 上一个</a><span> | </span><a href="../%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%8E%9F%E7%90%86.html">内容</a><span> | </span><a href="part154.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
