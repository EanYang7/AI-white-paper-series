<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="zh-cn" lang="zh-cn"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>3.3.2 分类</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part39.htm">&lt; 上一个</a><span> | </span><a href="../%E6%99%BA%E8%83%BD%E5%8D%8F%E5%90%8C%E6%8E%A7%E5%88%B6%E4%B8%8E%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD.html">内容</a><span> | </span><a href="part41.htm">下一个 &gt;</a></p><p class="s9" style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a name="bookmark36">3.3.2 </a><span class="s10">分类</span></p><p style="padding-top: 6pt;padding-left: 29pt;text-indent: 0pt;text-align: left;">协同过滤主要有下面两种算法：</p><p style="padding-top: 6pt;padding-bottom: 4pt;padding-left: 29pt;text-indent: 0pt;line-height: 142%;text-align: left;">基于用户的协同过滤算法<span class="s11">(UserCF)</span>：推荐和用户兴趣相似的其他用户喜欢的产品。基于物品的协同过滤算法<span class="s11">(ItemCF)</span>：给用户推荐和他之前喜欢的物品相似的物品。</p><p style="padding-left: 68pt;text-indent: 0pt;text-align: left;"><span><img width="450" height="152" alt="image" src="Image_013.jpg"/></span></p><p class="s15" style="padding-top: 3pt;padding-left: 11pt;text-indent: 0pt;text-align: center;">“人以群分”的基于用户的协同过滤                                     “物以类聚”的基于物品的协同过滤</p><p class="s12" style="padding-top: 2pt;padding-left: 27pt;text-indent: 0pt;text-align: center;">图 <span class="s13">3.3 </span>两种协同过滤算法对比</p><p class="s11" style="padding-top: 4pt;padding-left: 29pt;text-indent: 0pt;text-align: left;">UserCF <span class="p">算法主要包括两个步骤：</span></p><p style="padding-top: 6pt;padding-left: 29pt;text-indent: 0pt;text-align: left;">（<span class="s11">1</span>）找到和目标用户兴趣相似的集合</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 24pt;line-height: 142%;text-align: left;">（<span class="s11">2</span>）找到这个集合中的用户喜欢的，且目标用户没有听说过的物品推荐给目标用户。</p><p style="padding-left: 5pt;text-indent: 24pt;line-height: 142%;text-align: justify;">上面的两个步骤中，第一个步骤里面，我们会基于前面给出的相似性度量的方法找出与目标用户兴趣相似的用户，而第二个步骤里面，如何基于相似用户喜欢的物品来对目标用户进行推荐呢？这个要依赖于目标用户对相似用户喜欢的物品的一个喜好程度，那么如何衡量这个程度大小呢？为了更好理解上面的两个步骤，下面拿一个具体的例子把两个步骤具体化。</p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 15pt;text-align: left;">以下图为例，此例将会用于本文各种算法中</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 29pt;text-indent: 0pt;text-align: left;"><span><img width="558" height="154" alt="image" src="Image_014.jpg"/></span></p><p class="s12" style="padding-top: 5pt;padding-left: 170pt;text-indent: 0pt;text-align: justify;">图 <span class="s13">3.4 </span>用户对物品喜爱程度打分</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 24pt;line-height: 142%;text-align: justify;">给用户推荐物品的过程可以形象化为一个猜测用户对商品进行打分的任务，上面表格里面是 <span class="s11">5 </span>个用户对于 <span class="s11">5 </span>件物品的一个打分情况，就可以理解为用户对物品的喜欢程度。</p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 15pt;text-align: justify;">应用 <span class="s11">UserCF </span>算法的两个步骤：</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 24pt;line-height: 141%;text-align: justify;">首先根据前面的这些打分情况（或者说已有的用户向量）计算一下 <span class="s11">Alice </span>和用户 <span class="s11">1</span>， <span class="s11">2</span>， <span class="s11">3</span>， <span class="s11">4 </span>的相似程度， 找出与 <span class="s11">Alice </span>最相似的 <span class="s11">n </span>个用户</p><p style="padding-left: 29pt;text-indent: 0pt;text-align: justify;">根据这<span class="s11">n </span>个用户对物品 <span class="s11">5 </span>的评分情况和与 <span class="s11">Alice </span>的相似程度会猜测出 <span class="s11">Alice </span>对物品 <span class="s11">5</span></p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">的评分， 如果评分比较高的话， 就把物品 <span class="s11">5 </span>推荐给用户 <span class="s11">Alice</span>， 否则不推荐。</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 24pt;line-height: 141%;text-align: left;">关于第一个步骤， 上面已经给出了计算两个用户相似性的方法， 这里不再过多赘述， 这里主要解决第二个问题， 如何产生最终结果的预测。</p><p style="padding-left: 29pt;text-indent: 0pt;text-align: left;">最终结果的预测：</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 24pt;line-height: 142%;text-align: justify;">根据上面的几种方法， 我们可以计算出向量之间的相似程度， 也就是可以计算出 <span class="s11">Alice </span>和其他用户的相近程度， 这时候我们就可以选出与 <span class="s11">Alice </span>最相近的前 <span class="s11">n </span>个用户，基于他们对物品 <span class="s11">5 </span>的评价猜测出 <span class="s11">Alice </span>的打分值<span class="s11">.</span></p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 15pt;text-align: left;">协同过滤</p><p style="padding-top: 6pt;padding-left: 29pt;text-indent: 0pt;text-align: left;">基于物品的协同过滤<span class="s11">(ItemCF)</span>的基本思想是预先根据所有用户的历史偏好数据计算</p><p style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 142%;text-align: justify;">物品之间的相似性，然后把与用户喜欢的物品相类似的物品推荐给用户。比如物品<span class="s11">a </span>和 <span class="s11">c </span>非常相似，因为喜欢 <span class="s11">a </span>的用户同时也喜欢 <span class="s11">c</span>，而用户 <span class="s11">A </span>喜欢 <span class="s11">a</span>，所以把 <span class="s11">c </span>推荐给用户 <span class="s11">A</span>。<span class="s11">ItemCF </span>算法并不利用物品的内容属性计算物品之间的相似度，主要通过分析用户的行为记录计算物品之间的相似度，该算法认为，物品 <span class="s11">a </span>和物品 <span class="s11">c </span>具有很大的相似度是因为喜欢物品 <span class="s11">a </span>的用户大都喜欢物品 <span class="s11">c</span>。</p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 15pt;text-align: left;">基于物品的协同过滤算法主要步骤：</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 24pt;line-height: 142%;text-align: left;">根据物品的相似度和用户的历史行为给用户生成推荐列表（购买了该商品的用户也经常购买的其他商品）</p><p style="padding-left: 5pt;text-indent: 24pt;line-height: 142%;text-align: left;">基于物品的协同过滤算法和基于用户的协同过滤算法很像， 所以我们这里直接还是拿上面图 <span class="s11">3.4 </span>那个例子来看。</p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 15pt;text-align: left;">如果想知道 <span class="s11">Alice </span>对物品 <span class="s11">5 </span>打多少分，基于物品的协同过滤算法会这么做：</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 24pt;line-height: 142%;text-align: justify;">首先计算一下物品 <span class="s11">5 </span>和物品 <span class="s11">1</span>，<span class="s11">2</span>，<span class="s11">3</span>，<span class="s11">4 </span>之间的相似性（它们也是向量的形式， 每一列的值就是它们的向量表示， 因为 <span class="s11">ItemCF </span>认为物品 <span class="s11">a </span>和物品 <span class="s11">c </span>具有很大的相似度是因为喜欢物品 <span class="s11">a </span>的用户大都喜欢物品 <span class="s11">c</span>， 所以就可以基于每个用户对该物品的打分或者说喜欢程度来向量化物品）；</p><p style="padding-left: 29pt;text-indent: 0pt;line-height: 15pt;text-align: justify;">找出与物品 <span class="s11">5 </span>最相近的 <span class="s11">n </span>个物品；</p><p style="padding-top: 6pt;padding-left: 29pt;text-indent: 0pt;text-align: justify;">根据 <span class="s11">Alice </span>对最相近的 <span class="s11">n </span>个物品的打分去计算对物品 <span class="s11">5 </span>的打分情况。</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part39.htm">&lt; 上一个</a><span> | </span><a href="../%E6%99%BA%E8%83%BD%E5%8D%8F%E5%90%8C%E6%8E%A7%E5%88%B6%E4%B8%8E%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD.html">内容</a><span> | </span><a href="part41.htm">下一个 &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
